{
  "collection_info": {
    "name": "hybrid_argo_queries",
    "description": "Hybrid collection: Original simple queries + Enhanced analytical templates",
    "total_documents": 413,
    "original_queries": 407,
    "enhanced_queries": 6,
    "optimization_features": [
      "Simple column access queries (original)",
      "Complex analytical queries (enhanced)",
      "Multi-complexity support",
      "Backward compatibility",
      "Progressive enhancement"
    ],
    "last_updated": "2025-09-13T21:02:51.343549",
    "hybrid_version": "v1.0_simple_plus_v2.0_enhanced",
    "metadata_format": "chromadb_compatible"
  },
  "schema_info": {
    "floats": {
      "row_count": 17,
      "column_count": 21,
      "columns": [
        {
          "name": "float_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2902746",
            "2902747",
            "2902748",
            "2902182",
            "2902183",
            "2902184",
            "2902185",
            "2902186",
            "2902187",
            "2902188"
          ]
        },
        {
          "name": "wmo_number",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 17,
          "min_value": "2902182",
          "max_value": "2902748"
        },
        {
          "name": "program_name",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 5,
          "sample_values": [
            "INDIAN-OCEAN-ARGO",
            "EQUATORIAL INDIAN OCEAN-ARGO",
            "OTHER INDIAN OCEAN-ARGO",
            "ARABIAN SEA-ARGO",
            "BAY OF BENGAL-ARGO"
          ]
        },
        {
          "name": "platform_type",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 2,
          "sample_values": [
            "UNKNOWN",
            "APEX"
          ]
        },
        {
          "name": "data_assembly_center",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 2,
          "sample_values": [
            "argo-erddap",
            "indian-ocean-consortium"
          ]
        },
        {
          "name": "deployment_date",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2018-05-24T05:44:43",
            "2018-05-20T05:36:13",
            "2018-05-31T13:59:46",
            "2015-10-15T13:01:58",
            "2015-10-19T02:04:17",
            "2015-10-23T08:26:16",
            "2015-10-27T01:40:08",
            "2015-10-27T23:22:02",
            "2015-10-30T11:03:48",
            "2015-11-05T15:50:51"
          ]
        },
        {
          "name": "deployment_latitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": 17,
          "min_value": -13.969,
          "max_value": 33.963
        },
        {
          "name": "deployment_longitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": 17,
          "min_value": 66.865,
          "max_value": 147.843
        },
        {
          "name": "deployment_depth",
          "dtype": "object",
          "null_count": "17",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "current_status",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 2,
          "sample_values": [
            "DEAD",
            "INACTIVE"
          ]
        },
        {
          "name": "last_latitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": 17,
          "min_value": -20.841,
          "max_value": 29.563
        },
        {
          "name": "last_longitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": 17,
          "min_value": 46.305,
          "max_value": 144.966
        },
        {
          "name": "last_update",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2022-01-03T06:17:35",
            "2021-07-03T05:47:55",
            "2021-05-11T23:59:22",
            "2023-09-28T23:38:10",
            "2023-04-01T10:19:16",
            "2024-12-14T11:58:59",
            "2025-05-27T11:36:26",
            "2020-10-06T19:52:07",
            "2022-01-03T00:27:25",
            "2018-06-15T02:02:11"
          ]
        },
        {
          "name": "cycle_time_days",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "10",
          "max_value": "10"
        },
        {
          "name": "park_pressure_dbar",
          "dtype": "object",
          "null_count": "17",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "profile_pressure_dbar",
          "dtype": "object",
          "null_count": "17",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "total_profiles",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 16,
          "min_value": "3",
          "max_value": "308"
        },
        {
          "name": "quality_profiles",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "0",
          "max_value": "0"
        },
        {
          "name": "metadata_text",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "ARGO Float 2902746 (Platform 2902746):\n        Deployed at 20.727\u00c2\u00b0N, 146.067\u00c2\u00b0E on 2018-05-24\n        Total measurements: 13484, Status: DEAD\n        Last position: 19.247\u00c2\u00b0N, 138.261\u00c2\u00b0E on 2022-01-03\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 1.90 to 31.57\u00c2\u00b0C\n        Salinity range: 34.03 to 35.15 PSU\n        Pressure range: 0.0 to 2025.5 dbar",
            "ARGO Float 2902747 (Platform 2902747):\n        Deployed at 21.027\u00c2\u00b0N, 146.516\u00c2\u00b0E on 2018-05-20\n        Total measurements: 11505, Status: DEAD\n        Last position: 25.871\u00c2\u00b0N, 139.811\u00c2\u00b0E on 2021-07-03\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 1.95 to 31.86\u00c2\u00b0C\n        Salinity range: 33.83 to 35.12 PSU\n        Pressure range: 0.0 to 2013.7 dbar",
            "ARGO Float 2902748 (Platform 2902748):\n        Deployed at 33.963\u00c2\u00b0N, 147.843\u00c2\u00b0E on 2018-05-31\n        Total measurements: 63108, Status: DEAD\n        Last position: 29.563\u00c2\u00b0N, 144.966\u00c2\u00b0E on 2021-05-11\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 3.48 to 30.44\u00c2\u00b0C\n        Salinity range: 33.94 to 35.04 PSU\n        Pressure range: -0.2 to 1020.6 dbar",
            "ARGO Float 2902182 (Platform 2902182) - Equatorial Indian Ocean:\n        Deployed at 0.095\u00c2\u00b0N, 80.623\u00c2\u00b0E on 2015-10-15\n        Region: Equatorial Indian Ocean, Status: DEAD\n        Total measurements: 81742, Profiles: 283\n        Last position: 8.047\u00c2\u00b0N, 74.041\u00c2\u00b0E on 2023-09-28\n        Temperature range: 2.56 to 30.87\u00c2\u00b0C\n        Salinity range: 32.91 to 36.17 PSU\n        Depth range: 2.5 to 2001.3 dbar\n        Operating in Equatorial Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902183 (Platform 2902183) - Equatorial Indian Ocean:\n        Deployed at -3.854\u00c2\u00b0N, 80.376\u00c2\u00b0E on 2015-10-19\n        Region: Equatorial Indian Ocean, Status: DEAD\n        Total measurements: 74695, Profiles: 258\n        Last position: -5.284\u00c2\u00b0N, 97.385\u00c2\u00b0E on 2023-04-01\n        Temperature range: 2.55 to 30.58\u00c2\u00b0C\n        Salinity range: 33.37 to 35.61 PSU\n        Depth range: 2.4 to 2001.4 dbar\n        Operating in Equatorial Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902184 (Platform 2902184) - Other Indian Ocean:\n        Deployed at -11.984\u00c2\u00b0N, 80.392\u00c2\u00b0E on 2015-10-23\n        Region: Other Indian Ocean, Status: DEAD\n        Total measurements: 15473, Profiles: 268\n        Last position: -19.884\u00c2\u00b0N, 67.999\u00c2\u00b0E on 2024-12-14\n        Temperature range: 2.27 to 30.48\u00c2\u00b0C\n        Salinity range: 33.88 to 35.93 PSU\n        Depth range: 3.6 to 2001.0 dbar\n        Operating in Other Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902185 (Platform 2902185) - Other Indian Ocean:\n        Deployed at -13.969\u00c2\u00b0N, 73.630\u00c2\u00b0E on 2015-10-27\n        Region: Other Indian Ocean, Status: INACTIVE\n        Total measurements: 12954, Profiles: 225\n        Last position: -20.841\u00c2\u00b0N, 60.041\u00c2\u00b0E on 2025-05-27\n        Temperature range: 2.11 to 30.61\u00c2\u00b0C\n        Salinity range: 34.04 to 35.82 PSU\n        Depth range: 3.6 to 2000.9 dbar\n        Operating in Other Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902186 (Platform 2902186) - Other Indian Ocean:\n        Deployed at -12.909\u00c2\u00b0N, 70.001\u00c2\u00b0E on 2015-10-27\n        Region: Other Indian Ocean, Status: DEAD\n        Total measurements: 48300, Profiles: 181\n        Last position: -4.600\u00c2\u00b0N, 66.396\u00c2\u00b0E on 2020-10-06\n        Temperature range: 2.23 to 30.58\u00c2\u00b0C\n        Salinity range: 33.81 to 35.60 PSU\n        Depth range: 2.5 to 2001.3 dbar\n        Operating in Other Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902187 (Platform 2902187) - Equatorial Indian Ocean:\n        Deployed at -8.095\u00c2\u00b0N, 66.865\u00c2\u00b0E on 2015-10-30\n        Region: Equatorial Indian Ocean, Status: DEAD\n        Total measurements: 66096, Profiles: 230\n        Last position: -9.099\u00c2\u00b0N, 46.305\u00c2\u00b0E on 2022-01-03\n        Temperature range: 2.41 to 30.97\u00c2\u00b0C\n        Salinity range: 34.37 to 35.65 PSU\n        Depth range: 2.4 to 2001.3 dbar\n        Operating in Equatorial Indian Ocean for oceanographic research and climate monitoring",
            "ARGO Float 2902188 (Platform 2902188) - Arabian Sea:\n        Deployed at 4.997\u00c2\u00b0N, 69.479\u00c2\u00b0E on 2015-11-05\n        Region: Arabian Sea, Status: DEAD\n        Total measurements: 28357, Profiles: 98\n        Last position: 3.155\u00c2\u00b0N, 62.217\u00c2\u00b0E on 2018-06-15\n        Temperature range: 2.66 to 30.99\u00c2\u00b0C\n        Salinity range: 34.17 to 36.56 PSU\n        Depth range: 2.6 to 2001.6 dbar\n        Operating in Arabian Sea for oceanographic research and climate monitoring"
          ]
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2025-09-07 03:39:40",
            "2025-09-07 03:39:49",
            "2025-09-07 03:40:03",
            "2025-09-07 04:03:20",
            "2025-09-07 04:03:53",
            "2025-09-07 04:05:01",
            "2025-09-07 04:42:37",
            "2025-09-07 04:42:57",
            "2025-09-07 04:43:24",
            "2025-09-07 04:43:56"
          ]
        },
        {
          "name": "updated_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2025-09-07 03:39:40",
            "2025-09-07 03:39:49",
            "2025-09-07 03:40:03",
            "2025-09-07 04:03:20",
            "2025-09-07 04:03:53",
            "2025-09-07 04:05:01",
            "2025-09-07 04:42:37",
            "2025-09-07 04:42:57",
            "2025-09-07 04:43:24",
            "2025-09-07 04:43:56"
          ]
        }
      ],
      "sample_data": [
        {
          "float_id": "2902746",
          "wmo_number": 2902746,
          "program_name": "INDIAN-OCEAN-ARGO",
          "platform_type": "UNKNOWN",
          "data_assembly_center": "argo-erddap",
          "deployment_date": "2018-05-24T05:44:43",
          "deployment_latitude": 20.727,
          "deployment_longitude": 146.067,
          "deployment_depth": null,
          "current_status": "DEAD",
          "last_latitude": 19.247,
          "last_longitude": 138.261,
          "last_update": "2022-01-03T06:17:35",
          "cycle_time_days": 10,
          "park_pressure_dbar": null,
          "profile_pressure_dbar": null,
          "total_profiles": 133,
          "quality_profiles": 0,
          "metadata_text": "ARGO Float 2902746 (Platform 2902746):\n        Deployed at 20.727\u00c2\u00b0N, 146.067\u00c2\u00b0E on 2018-05-24\n        Total measurements: 13484, Status: DEAD\n        Last position: 19.247\u00c2\u00b0N, 138.261\u00c2\u00b0E on 2022-01-03\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 1.90 to 31.57\u00c2\u00b0C\n        Salinity range: 34.03 to 35.15 PSU\n        Pressure range: 0.0 to 2025.5 dbar",
          "created_at": "2025-09-07 03:39:40",
          "updated_at": "2025-09-07 03:39:40"
        },
        {
          "float_id": "2902747",
          "wmo_number": 2902747,
          "program_name": "INDIAN-OCEAN-ARGO",
          "platform_type": "UNKNOWN",
          "data_assembly_center": "argo-erddap",
          "deployment_date": "2018-05-20T05:36:13",
          "deployment_latitude": 21.027,
          "deployment_longitude": 146.516,
          "deployment_depth": null,
          "current_status": "DEAD",
          "last_latitude": 25.871,
          "last_longitude": 139.811,
          "last_update": "2021-07-03T05:47:55",
          "cycle_time_days": 10,
          "park_pressure_dbar": null,
          "profile_pressure_dbar": null,
          "total_profiles": 114,
          "quality_profiles": 0,
          "metadata_text": "ARGO Float 2902747 (Platform 2902747):\n        Deployed at 21.027\u00c2\u00b0N, 146.516\u00c2\u00b0E on 2018-05-20\n        Total measurements: 11505, Status: DEAD\n        Last position: 25.871\u00c2\u00b0N, 139.811\u00c2\u00b0E on 2021-07-03\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 1.95 to 31.86\u00c2\u00b0C\n        Salinity range: 33.83 to 35.12 PSU\n        Pressure range: 0.0 to 2013.7 dbar",
          "created_at": "2025-09-07 03:39:49",
          "updated_at": "2025-09-07 03:39:49"
        },
        {
          "float_id": "2902748",
          "wmo_number": 2902748,
          "program_name": "INDIAN-OCEAN-ARGO",
          "platform_type": "UNKNOWN",
          "data_assembly_center": "argo-erddap",
          "deployment_date": "2018-05-31T13:59:46",
          "deployment_latitude": 33.963,
          "deployment_longitude": 147.843,
          "deployment_depth": null,
          "current_status": "DEAD",
          "last_latitude": 29.563,
          "last_longitude": 144.966,
          "last_update": "2021-05-11T23:59:22",
          "cycle_time_days": 10,
          "park_pressure_dbar": null,
          "profile_pressure_dbar": null,
          "total_profiles": 308,
          "quality_profiles": 0,
          "metadata_text": "ARGO Float 2902748 (Platform 2902748):\n        Deployed at 33.963\u00c2\u00b0N, 147.843\u00c2\u00b0E on 2018-05-31\n        Total measurements: 63108, Status: DEAD\n        Last position: 29.563\u00c2\u00b0N, 144.966\u00c2\u00b0E on 2021-05-11\n        Operating in Indian Ocean region for oceanographic research\n        Temperature range: 3.48 to 30.44\u00c2\u00b0C\n        Salinity range: 33.94 to 35.04 PSU\n        Pressure range: -0.2 to 1020.6 dbar",
          "created_at": "2025-09-07 03:40:03",
          "updated_at": "2025-09-07 03:40:03"
        }
      ]
    },
    "profiles": {
      "row_count": 3130,
      "column_count": 18,
      "columns": [
        {
          "name": "profile_id",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": null,
          "min_value": "1",
          "max_value": "3130"
        },
        {
          "name": "float_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 17,
          "sample_values": [
            "2902746",
            "2902747",
            "2902748",
            "2902182",
            "2902183",
            "2902184",
            "2902185",
            "2902186",
            "2902187",
            "2902188"
          ]
        },
        {
          "name": "cycle_number",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": null,
          "min_value": "1",
          "max_value": "351"
        },
        {
          "name": "profile_direction",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 1,
          "sample_values": [
            "A"
          ]
        },
        {
          "name": "profile_date",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        },
        {
          "name": "latitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": -21.656,
          "max_value": 35.762
        },
        {
          "name": "longitude",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 39.878,
          "max_value": 154.617
        },
        {
          "name": "max_pressure",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 943.0,
          "max_value": 2025.5
        },
        {
          "name": "num_levels",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": null,
          "min_value": "22",
          "max_value": "1000"
        },
        {
          "name": "vertical_sampling_scheme",
          "dtype": "object",
          "null_count": "3130",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "data_mode",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 1,
          "sample_values": [
            "R"
          ]
        },
        {
          "name": "data_quality_flag",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "processing_date",
          "dtype": "object",
          "null_count": "3130",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "netcdf_filename",
          "dtype": "object",
          "null_count": "3130",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "file_checksum",
          "dtype": "object",
          "null_count": "3130",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "profile_summary",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        },
        {
          "name": "updated_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        }
      ],
      "sample_data": [
        {
          "profile_id": 1,
          "float_id": "2902746",
          "cycle_number": 1,
          "profile_direction": "A",
          "profile_date": "2018-05-24T05:44:43",
          "latitude": 20.727,
          "longitude": 146.067,
          "max_pressure": 1983.699951171875,
          "num_levels": 101,
          "vertical_sampling_scheme": null,
          "data_mode": "R",
          "data_quality_flag": 1,
          "processing_date": null,
          "netcdf_filename": null,
          "file_checksum": null,
          "profile_summary": "Profile 1 from Float 2902746:\n            Location: 20.727\u00c2\u00b0N, 146.067\u00c2\u00b0E, Date: 2018-05-24\n            Depth: 0-1984 dbar (101 levels)\n            Temperature: 1.98-30.50\u00c2\u00b0C, Salinity: 34.14-35.09 PSU\n            Data quality: 100.0% good measurements",
          "created_at": "2025-09-07 03:39:40",
          "updated_at": "2025-09-07 03:39:40"
        },
        {
          "profile_id": 2,
          "float_id": "2902746",
          "cycle_number": 2,
          "profile_direction": "A",
          "profile_date": "2018-06-03T05:36:50",
          "latitude": 20.847,
          "longitude": 146.029,
          "max_pressure": 1975.5,
          "num_levels": 101,
          "vertical_sampling_scheme": null,
          "data_mode": "R",
          "data_quality_flag": 1,
          "processing_date": null,
          "netcdf_filename": null,
          "file_checksum": null,
          "profile_summary": "Profile 2 from Float 2902746:\n            Location: 20.847\u00c2\u00b0N, 146.029\u00c2\u00b0E, Date: 2018-06-03\n            Depth: 0-1976 dbar (101 levels)\n            Temperature: 1.97-29.08\u00c2\u00b0C, Salinity: 34.13-35.08 PSU\n            Data quality: 100.0% good measurements",
          "created_at": "2025-09-07 03:39:40",
          "updated_at": "2025-09-07 03:39:40"
        },
        {
          "profile_id": 3,
          "float_id": "2902746",
          "cycle_number": 3,
          "profile_direction": "A",
          "profile_date": "2018-06-13T05:43:20",
          "latitude": 21.061,
          "longitude": 145.673,
          "max_pressure": 2002.800048828125,
          "num_levels": 103,
          "vertical_sampling_scheme": null,
          "data_mode": "R",
          "data_quality_flag": 1,
          "processing_date": null,
          "netcdf_filename": null,
          "file_checksum": null,
          "profile_summary": "Profile 3 from Float 2902746:\n            Location: 21.061\u00c2\u00b0N, 145.673\u00c2\u00b0E, Date: 2018-06-13\n            Depth: 0-2003 dbar (103 levels)\n            Temperature: 1.90-28.92\u00c2\u00b0C, Salinity: 34.10-35.09 PSU\n            Data quality: 100.0% good measurements",
          "created_at": "2025-09-07 03:39:40",
          "updated_at": "2025-09-07 03:39:40"
        }
      ]
    },
    "measurements": {
      "row_count": 1425648,
      "column_count": 29,
      "columns": [
        {
          "name": "measurement_id",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": null,
          "min_value": "1",
          "max_value": "1425648"
        },
        {
          "name": "profile_id",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": null,
          "min_value": "1",
          "max_value": "3130"
        },
        {
          "name": "pressure",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 0.0,
          "max_value": 2025.5
        },
        {
          "name": "depth",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 0.0,
          "max_value": 2065.4347580000003
        },
        {
          "name": "pressure_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "temperature",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 1.9049999713897705,
          "max_value": 31.863000869750977
        },
        {
          "name": "temperature_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "salinity",
          "dtype": "float64",
          "null_count": "0",
          "unique_values": null,
          "min_value": 28.233980178833008,
          "max_value": 36.5595703125
        },
        {
          "name": "salinity_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "dissolved_oxygen",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "dissolved_oxygen_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "ph_in_situ",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "ph_in_situ_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "chlorophyll_a",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "chlorophyll_a_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "particle_backscattering",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "particle_backscattering_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "downward_irradiance",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "downward_irradiance_qc",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "potential_temperature",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "potential_density",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "buoyancy_frequency",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "mixed_layer_depth",
          "dtype": "object",
          "null_count": "1425648",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "processing_level",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 1,
          "sample_values": [
            "L1"
          ]
        },
        {
          "name": "interpolated",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "0",
          "max_value": "0"
        },
        {
          "name": "spike_test_flag",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "gradient_test_flag",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 1,
          "min_value": "1",
          "max_value": "1"
        },
        {
          "name": "parameter_summary",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": null
        }
      ],
      "sample_data": [
        {
          "measurement_id": 1,
          "profile_id": 1,
          "pressure": 0.20000000298023224,
          "depth": 0.20394320303899052,
          "pressure_qc": 1,
          "temperature": 30.499000549316406,
          "temperature_qc": 1,
          "salinity": 34.382999420166016,
          "salinity_qc": 1,
          "dissolved_oxygen": null,
          "dissolved_oxygen_qc": 1,
          "ph_in_situ": null,
          "ph_in_situ_qc": 1,
          "chlorophyll_a": null,
          "chlorophyll_a_qc": 1,
          "particle_backscattering": null,
          "particle_backscattering_qc": 1,
          "downward_irradiance": null,
          "downward_irradiance_qc": 1,
          "potential_temperature": null,
          "potential_density": null,
          "buoyancy_frequency": null,
          "mixed_layer_depth": null,
          "processing_level": "L1",
          "interpolated": 0,
          "spike_test_flag": 1,
          "gradient_test_flag": 1,
          "parameter_summary": "Depth 0m (0.2dbar): T:30.50\u00c2\u00b0C, S:34.38PSU",
          "created_at": "2025-09-07 03:39:43"
        },
        {
          "measurement_id": 2,
          "profile_id": 1,
          "pressure": 0.8999999761581421,
          "depth": 0.9177443756880761,
          "pressure_qc": 1,
          "temperature": 30.350000381469727,
          "temperature_qc": 1,
          "salinity": 34.558998107910156,
          "salinity_qc": 1,
          "dissolved_oxygen": null,
          "dissolved_oxygen_qc": 1,
          "ph_in_situ": null,
          "ph_in_situ_qc": 1,
          "chlorophyll_a": null,
          "chlorophyll_a_qc": 1,
          "particle_backscattering": null,
          "particle_backscattering_qc": 1,
          "downward_irradiance": null,
          "downward_irradiance_qc": 1,
          "potential_temperature": null,
          "potential_density": null,
          "buoyancy_frequency": null,
          "mixed_layer_depth": null,
          "processing_level": "L1",
          "interpolated": 0,
          "spike_test_flag": 1,
          "gradient_test_flag": 1,
          "parameter_summary": "Depth 1m (0.9dbar): T:30.35\u00c2\u00b0C, S:34.56PSU",
          "created_at": "2025-09-07 03:39:43"
        },
        {
          "measurement_id": 3,
          "profile_id": 1,
          "pressure": 1.899999976158142,
          "depth": 1.9374603756880762,
          "pressure_qc": 1,
          "temperature": 29.64900016784668,
          "temperature_qc": 1,
          "salinity": 34.737998962402344,
          "salinity_qc": 1,
          "dissolved_oxygen": null,
          "dissolved_oxygen_qc": 1,
          "ph_in_situ": null,
          "ph_in_situ_qc": 1,
          "chlorophyll_a": null,
          "chlorophyll_a_qc": 1,
          "particle_backscattering": null,
          "particle_backscattering_qc": 1,
          "downward_irradiance": null,
          "downward_irradiance_qc": 1,
          "potential_temperature": null,
          "potential_density": null,
          "buoyancy_frequency": null,
          "mixed_layer_depth": null,
          "processing_level": "L1",
          "interpolated": 0,
          "spike_test_flag": 1,
          "gradient_test_flag": 1,
          "parameter_summary": "Depth 2m (1.9dbar): T:29.65\u00c2\u00b0C, S:34.74PSU",
          "created_at": "2025-09-07 03:39:43"
        }
      ]
    },
    "spatial_summaries": {
      "row_count": 0,
      "column_count": 26,
      "columns": [
        {
          "name": "summary_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "grid_lat_min",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "grid_lon_min",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "grid_lat_max",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "grid_lon_max",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "time_period_start",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "time_period_end",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "temporal_resolution",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "profile_count",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "float_count",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "measurement_count",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "temp_mean",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "temp_std",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "temp_min",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "temp_max",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "sal_mean",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "sal_std",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "sal_min",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "sal_max",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "max_depth",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "quality_score",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "real_time_ratio",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "delayed_mode_ratio",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "spatial_pattern_summary",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "updated_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        }
      ],
      "sample_data": []
    },
    "quality_control_tests": {
      "row_count": 6,
      "column_count": 6,
      "columns": [
        {
          "name": "test_id",
          "dtype": "int64",
          "null_count": "0",
          "unique_values": 6,
          "min_value": "1",
          "max_value": "6"
        },
        {
          "name": "test_name",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 6,
          "sample_values": [
            "temperature_range_test",
            "salinity_range_test",
            "pressure_monotonic_test",
            "spike_detection_test",
            "gradient_test",
            "density_inversion_test"
          ]
        },
        {
          "name": "test_description",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 6,
          "sample_values": [
            "Check if temperature is within valid oceanic range (-5 to 50\u00c2\u00b0C)",
            "Check if salinity is within valid range (0 to 50 PSU)",
            "Check if pressure increases monotonically with depth",
            "Detect anomalous spikes in parameter values",
            "Check for excessive gradients between adjacent measurements",
            "Check for density inversions indicating data issues"
          ]
        },
        {
          "name": "test_category",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 4,
          "sample_values": [
            "range",
            "consistency",
            "anomaly",
            "gradient"
          ]
        },
        {
          "name": "test_parameters",
          "dtype": "object",
          "null_count": "6",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 1,
          "sample_values": [
            "2025-09-07 03:29:45"
          ]
        }
      ],
      "sample_data": [
        {
          "test_id": 1,
          "test_name": "temperature_range_test",
          "test_description": "Check if temperature is within valid oceanic range (-5 to 50\u00c2\u00b0C)",
          "test_category": "range",
          "test_parameters": null,
          "created_at": "2025-09-07 03:29:45"
        },
        {
          "test_id": 2,
          "test_name": "salinity_range_test",
          "test_description": "Check if salinity is within valid range (0 to 50 PSU)",
          "test_category": "range",
          "test_parameters": null,
          "created_at": "2025-09-07 03:29:45"
        },
        {
          "test_id": 3,
          "test_name": "pressure_monotonic_test",
          "test_description": "Check if pressure increases monotonically with depth",
          "test_category": "consistency",
          "test_parameters": null,
          "created_at": "2025-09-07 03:29:45"
        }
      ]
    },
    "quality_control_results": {
      "row_count": 0,
      "column_count": 6,
      "columns": [
        {
          "name": "result_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "measurement_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "test_id",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "test_result",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "test_details",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        },
        {
          "name": "created_at",
          "dtype": "object",
          "null_count": "0",
          "unique_values": 0,
          "sample_values": []
        }
      ],
      "sample_data": []
    }
  },
  "queries": [
    {
      "id": "col_0001",
      "content": "Column Query: get float_id\n                Intent: retrieve float_id values from floats\n                Context: Direct access to float_id column in floats table\n                Table: floats\n                Column: float_id\n                Data Type: object\n                SQL: SELECT float_id FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0002",
      "content": "Column Query: show float_id\n                Intent: display float_id data from floats\n                Context: Limited view of float_id column data\n                Table: floats\n                Column: float_id\n                Data Type: object\n                SQL: SELECT float_id FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0003",
      "content": "Column Query: list float_id\n                Intent: list unique float_id values\n                Context: Unique values in float_id column\n                Table: floats\n                Column: float_id\n                Data Type: object\n                SQL: SELECT DISTINCT float_id FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0004",
      "content": "Column Query: get wmo_number\n                Intent: retrieve wmo_number values from floats\n                Context: Direct access to wmo_number column in floats table\n                Table: floats\n                Column: wmo_number\n                Data Type: int64\n                SQL: SELECT wmo_number FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "wmo_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0005",
      "content": "Column Query: show wmo_number\n                Intent: display wmo_number data from floats\n                Context: Limited view of wmo_number column data\n                Table: floats\n                Column: wmo_number\n                Data Type: int64\n                SQL: SELECT wmo_number FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "wmo_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0006",
      "content": "Column Query: list wmo_number\n                Intent: list unique wmo_number values\n                Context: Unique values in wmo_number column\n                Table: floats\n                Column: wmo_number\n                Data Type: int64\n                SQL: SELECT DISTINCT wmo_number FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "wmo_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0007",
      "content": "Column Query: get program_name\n                Intent: retrieve program_name values from floats\n                Context: Direct access to program_name column in floats table\n                Table: floats\n                Column: program_name\n                Data Type: object\n                SQL: SELECT program_name FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "program_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0008",
      "content": "Column Query: show program_name\n                Intent: display program_name data from floats\n                Context: Limited view of program_name column data\n                Table: floats\n                Column: program_name\n                Data Type: object\n                SQL: SELECT program_name FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "program_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0009",
      "content": "Column Query: list program_name\n                Intent: list unique program_name values\n                Context: Unique values in program_name column\n                Table: floats\n                Column: program_name\n                Data Type: object\n                SQL: SELECT DISTINCT program_name FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "program_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0010",
      "content": "Column Query: get platform_type\n                Intent: retrieve platform_type values from floats\n                Context: Direct access to platform_type column in floats table\n                Table: floats\n                Column: platform_type\n                Data Type: object\n                SQL: SELECT platform_type FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "platform_type",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0011",
      "content": "Column Query: show platform_type\n                Intent: display platform_type data from floats\n                Context: Limited view of platform_type column data\n                Table: floats\n                Column: platform_type\n                Data Type: object\n                SQL: SELECT platform_type FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "platform_type",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0012",
      "content": "Column Query: list platform_type\n                Intent: list unique platform_type values\n                Context: Unique values in platform_type column\n                Table: floats\n                Column: platform_type\n                Data Type: object\n                SQL: SELECT DISTINCT platform_type FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "platform_type",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0013",
      "content": "Column Query: get data_assembly_center\n                Intent: retrieve data_assembly_center values from floats\n                Context: Direct access to data_assembly_center column in floats table\n                Table: floats\n                Column: data_assembly_center\n                Data Type: object\n                SQL: SELECT data_assembly_center FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "data_assembly_center",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0014",
      "content": "Column Query: show data_assembly_center\n                Intent: display data_assembly_center data from floats\n                Context: Limited view of data_assembly_center column data\n                Table: floats\n                Column: data_assembly_center\n                Data Type: object\n                SQL: SELECT data_assembly_center FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "data_assembly_center",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0015",
      "content": "Column Query: list data_assembly_center\n                Intent: list unique data_assembly_center values\n                Context: Unique values in data_assembly_center column\n                Table: floats\n                Column: data_assembly_center\n                Data Type: object\n                SQL: SELECT DISTINCT data_assembly_center FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "data_assembly_center",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0016",
      "content": "Column Query: get deployment_date\n                Intent: retrieve deployment_date values from floats\n                Context: Direct access to deployment_date column in floats table\n                Table: floats\n                Column: deployment_date\n                Data Type: object\n                SQL: SELECT deployment_date FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0017",
      "content": "Column Query: show deployment_date\n                Intent: display deployment_date data from floats\n                Context: Limited view of deployment_date column data\n                Table: floats\n                Column: deployment_date\n                Data Type: object\n                SQL: SELECT deployment_date FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0018",
      "content": "Column Query: list deployment_date\n                Intent: list unique deployment_date values\n                Context: Unique values in deployment_date column\n                Table: floats\n                Column: deployment_date\n                Data Type: object\n                SQL: SELECT DISTINCT deployment_date FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0019",
      "content": "Column Query: get deployment_latitude\n                Intent: retrieve deployment_latitude values from floats\n                Context: Direct access to deployment_latitude column in floats table\n                Table: floats\n                Column: deployment_latitude\n                Data Type: float64\n                SQL: SELECT deployment_latitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0020",
      "content": "Column Query: show deployment_latitude\n                Intent: display deployment_latitude data from floats\n                Context: Limited view of deployment_latitude column data\n                Table: floats\n                Column: deployment_latitude\n                Data Type: float64\n                SQL: SELECT deployment_latitude FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0021",
      "content": "Column Query: list deployment_latitude\n                Intent: list unique deployment_latitude values\n                Context: Unique values in deployment_latitude column\n                Table: floats\n                Column: deployment_latitude\n                Data Type: float64\n                SQL: SELECT DISTINCT deployment_latitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0022",
      "content": "Column Query: get deployment_longitude\n                Intent: retrieve deployment_longitude values from floats\n                Context: Direct access to deployment_longitude column in floats table\n                Table: floats\n                Column: deployment_longitude\n                Data Type: float64\n                SQL: SELECT deployment_longitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0023",
      "content": "Column Query: show deployment_longitude\n                Intent: display deployment_longitude data from floats\n                Context: Limited view of deployment_longitude column data\n                Table: floats\n                Column: deployment_longitude\n                Data Type: float64\n                SQL: SELECT deployment_longitude FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0024",
      "content": "Column Query: list deployment_longitude\n                Intent: list unique deployment_longitude values\n                Context: Unique values in deployment_longitude column\n                Table: floats\n                Column: deployment_longitude\n                Data Type: float64\n                SQL: SELECT DISTINCT deployment_longitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0025",
      "content": "Column Query: get deployment_depth\n                Intent: retrieve deployment_depth values from floats\n                Context: Direct access to deployment_depth column in floats table\n                Table: floats\n                Column: deployment_depth\n                Data Type: object\n                SQL: SELECT deployment_depth FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0026",
      "content": "Column Query: show deployment_depth\n                Intent: display deployment_depth data from floats\n                Context: Limited view of deployment_depth column data\n                Table: floats\n                Column: deployment_depth\n                Data Type: object\n                SQL: SELECT deployment_depth FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0027",
      "content": "Column Query: list deployment_depth\n                Intent: list unique deployment_depth values\n                Context: Unique values in deployment_depth column\n                Table: floats\n                Column: deployment_depth\n                Data Type: object\n                SQL: SELECT DISTINCT deployment_depth FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "deployment_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0028",
      "content": "Column Query: get current_status\n                Intent: retrieve current_status values from floats\n                Context: Direct access to current_status column in floats table\n                Table: floats\n                Column: current_status\n                Data Type: object\n                SQL: SELECT current_status FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "current_status",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0029",
      "content": "Column Query: show current_status\n                Intent: display current_status data from floats\n                Context: Limited view of current_status column data\n                Table: floats\n                Column: current_status\n                Data Type: object\n                SQL: SELECT current_status FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "current_status",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0030",
      "content": "Column Query: list current_status\n                Intent: list unique current_status values\n                Context: Unique values in current_status column\n                Table: floats\n                Column: current_status\n                Data Type: object\n                SQL: SELECT DISTINCT current_status FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "current_status",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0031",
      "content": "Column Query: get last_latitude\n                Intent: retrieve last_latitude values from floats\n                Context: Direct access to last_latitude column in floats table\n                Table: floats\n                Column: last_latitude\n                Data Type: float64\n                SQL: SELECT last_latitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0032",
      "content": "Column Query: show last_latitude\n                Intent: display last_latitude data from floats\n                Context: Limited view of last_latitude column data\n                Table: floats\n                Column: last_latitude\n                Data Type: float64\n                SQL: SELECT last_latitude FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0033",
      "content": "Column Query: list last_latitude\n                Intent: list unique last_latitude values\n                Context: Unique values in last_latitude column\n                Table: floats\n                Column: last_latitude\n                Data Type: float64\n                SQL: SELECT DISTINCT last_latitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0034",
      "content": "Column Query: get last_longitude\n                Intent: retrieve last_longitude values from floats\n                Context: Direct access to last_longitude column in floats table\n                Table: floats\n                Column: last_longitude\n                Data Type: float64\n                SQL: SELECT last_longitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0035",
      "content": "Column Query: show last_longitude\n                Intent: display last_longitude data from floats\n                Context: Limited view of last_longitude column data\n                Table: floats\n                Column: last_longitude\n                Data Type: float64\n                SQL: SELECT last_longitude FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0036",
      "content": "Column Query: list last_longitude\n                Intent: list unique last_longitude values\n                Context: Unique values in last_longitude column\n                Table: floats\n                Column: last_longitude\n                Data Type: float64\n                SQL: SELECT DISTINCT last_longitude FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0037",
      "content": "Column Query: get last_update\n                Intent: retrieve last_update values from floats\n                Context: Direct access to last_update column in floats table\n                Table: floats\n                Column: last_update\n                Data Type: object\n                SQL: SELECT last_update FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_update",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0038",
      "content": "Column Query: show last_update\n                Intent: display last_update data from floats\n                Context: Limited view of last_update column data\n                Table: floats\n                Column: last_update\n                Data Type: object\n                SQL: SELECT last_update FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_update",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0039",
      "content": "Column Query: list last_update\n                Intent: list unique last_update values\n                Context: Unique values in last_update column\n                Table: floats\n                Column: last_update\n                Data Type: object\n                SQL: SELECT DISTINCT last_update FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "last_update",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0040",
      "content": "Column Query: get cycle_time_days\n                Intent: retrieve cycle_time_days values from floats\n                Context: Direct access to cycle_time_days column in floats table\n                Table: floats\n                Column: cycle_time_days\n                Data Type: int64\n                SQL: SELECT cycle_time_days FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "cycle_time_days",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0041",
      "content": "Column Query: show cycle_time_days\n                Intent: display cycle_time_days data from floats\n                Context: Limited view of cycle_time_days column data\n                Table: floats\n                Column: cycle_time_days\n                Data Type: int64\n                SQL: SELECT cycle_time_days FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "cycle_time_days",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0042",
      "content": "Column Query: list cycle_time_days\n                Intent: list unique cycle_time_days values\n                Context: Unique values in cycle_time_days column\n                Table: floats\n                Column: cycle_time_days\n                Data Type: int64\n                SQL: SELECT DISTINCT cycle_time_days FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "cycle_time_days",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0043",
      "content": "Column Query: get park_pressure_dbar\n                Intent: retrieve park_pressure_dbar values from floats\n                Context: Direct access to park_pressure_dbar column in floats table\n                Table: floats\n                Column: park_pressure_dbar\n                Data Type: object\n                SQL: SELECT park_pressure_dbar FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "park_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0044",
      "content": "Column Query: show park_pressure_dbar\n                Intent: display park_pressure_dbar data from floats\n                Context: Limited view of park_pressure_dbar column data\n                Table: floats\n                Column: park_pressure_dbar\n                Data Type: object\n                SQL: SELECT park_pressure_dbar FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "park_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0045",
      "content": "Column Query: list park_pressure_dbar\n                Intent: list unique park_pressure_dbar values\n                Context: Unique values in park_pressure_dbar column\n                Table: floats\n                Column: park_pressure_dbar\n                Data Type: object\n                SQL: SELECT DISTINCT park_pressure_dbar FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "park_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0046",
      "content": "Column Query: get profile_pressure_dbar\n                Intent: retrieve profile_pressure_dbar values from floats\n                Context: Direct access to profile_pressure_dbar column in floats table\n                Table: floats\n                Column: profile_pressure_dbar\n                Data Type: object\n                SQL: SELECT profile_pressure_dbar FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "profile_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0047",
      "content": "Column Query: show profile_pressure_dbar\n                Intent: display profile_pressure_dbar data from floats\n                Context: Limited view of profile_pressure_dbar column data\n                Table: floats\n                Column: profile_pressure_dbar\n                Data Type: object\n                SQL: SELECT profile_pressure_dbar FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "profile_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0048",
      "content": "Column Query: list profile_pressure_dbar\n                Intent: list unique profile_pressure_dbar values\n                Context: Unique values in profile_pressure_dbar column\n                Table: floats\n                Column: profile_pressure_dbar\n                Data Type: object\n                SQL: SELECT DISTINCT profile_pressure_dbar FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "profile_pressure_dbar",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0049",
      "content": "Column Query: get total_profiles\n                Intent: retrieve total_profiles values from floats\n                Context: Direct access to total_profiles column in floats table\n                Table: floats\n                Column: total_profiles\n                Data Type: int64\n                SQL: SELECT total_profiles FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "total_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0050",
      "content": "Column Query: show total_profiles\n                Intent: display total_profiles data from floats\n                Context: Limited view of total_profiles column data\n                Table: floats\n                Column: total_profiles\n                Data Type: int64\n                SQL: SELECT total_profiles FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "total_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0051",
      "content": "Column Query: list total_profiles\n                Intent: list unique total_profiles values\n                Context: Unique values in total_profiles column\n                Table: floats\n                Column: total_profiles\n                Data Type: int64\n                SQL: SELECT DISTINCT total_profiles FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "total_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0052",
      "content": "Column Query: get quality_profiles\n                Intent: retrieve quality_profiles values from floats\n                Context: Direct access to quality_profiles column in floats table\n                Table: floats\n                Column: quality_profiles\n                Data Type: int64\n                SQL: SELECT quality_profiles FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "quality_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0053",
      "content": "Column Query: show quality_profiles\n                Intent: display quality_profiles data from floats\n                Context: Limited view of quality_profiles column data\n                Table: floats\n                Column: quality_profiles\n                Data Type: int64\n                SQL: SELECT quality_profiles FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "quality_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0054",
      "content": "Column Query: list quality_profiles\n                Intent: list unique quality_profiles values\n                Context: Unique values in quality_profiles column\n                Table: floats\n                Column: quality_profiles\n                Data Type: int64\n                SQL: SELECT DISTINCT quality_profiles FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "quality_profiles",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0055",
      "content": "Column Query: get metadata_text\n                Intent: retrieve metadata_text values from floats\n                Context: Direct access to metadata_text column in floats table\n                Table: floats\n                Column: metadata_text\n                Data Type: object\n                SQL: SELECT metadata_text FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "metadata_text",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0056",
      "content": "Column Query: show metadata_text\n                Intent: display metadata_text data from floats\n                Context: Limited view of metadata_text column data\n                Table: floats\n                Column: metadata_text\n                Data Type: object\n                SQL: SELECT metadata_text FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "metadata_text",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0057",
      "content": "Column Query: list metadata_text\n                Intent: list unique metadata_text values\n                Context: Unique values in metadata_text column\n                Table: floats\n                Column: metadata_text\n                Data Type: object\n                SQL: SELECT DISTINCT metadata_text FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "metadata_text",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0058",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from floats\n                Context: Direct access to created_at column in floats table\n                Table: floats\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0059",
      "content": "Column Query: show created_at\n                Intent: display created_at data from floats\n                Context: Limited view of created_at column data\n                Table: floats\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0060",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: floats\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0061",
      "content": "Column Query: get updated_at\n                Intent: retrieve updated_at values from floats\n                Context: Direct access to updated_at column in floats table\n                Table: floats\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0062",
      "content": "Column Query: show updated_at\n                Intent: display updated_at data from floats\n                Context: Limited view of updated_at column data\n                Table: floats\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM floats LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0063",
      "content": "Column Query: list updated_at\n                Intent: list unique updated_at values\n                Context: Unique values in updated_at column\n                Table: floats\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT DISTINCT updated_at FROM floats\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "floats",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0064",
      "content": "Column Query: get profile_id\n                Intent: retrieve profile_id values from profiles\n                Context: Direct access to profile_id column in profiles table\n                Table: profiles\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT profile_id FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0065",
      "content": "Column Query: show profile_id\n                Intent: display profile_id data from profiles\n                Context: Limited view of profile_id column data\n                Table: profiles\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT profile_id FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0066",
      "content": "Column Query: list profile_id\n                Intent: list unique profile_id values\n                Context: Unique values in profile_id column\n                Table: profiles\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT DISTINCT profile_id FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0067",
      "content": "Column Query: get float_id\n                Intent: retrieve float_id values from profiles\n                Context: Direct access to float_id column in profiles table\n                Table: profiles\n                Column: float_id\n                Data Type: object\n                SQL: SELECT float_id FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0068",
      "content": "Column Query: show float_id\n                Intent: display float_id data from profiles\n                Context: Limited view of float_id column data\n                Table: profiles\n                Column: float_id\n                Data Type: object\n                SQL: SELECT float_id FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0069",
      "content": "Column Query: list float_id\n                Intent: list unique float_id values\n                Context: Unique values in float_id column\n                Table: profiles\n                Column: float_id\n                Data Type: object\n                SQL: SELECT DISTINCT float_id FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "float_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0070",
      "content": "Column Query: get cycle_number\n                Intent: retrieve cycle_number values from profiles\n                Context: Direct access to cycle_number column in profiles table\n                Table: profiles\n                Column: cycle_number\n                Data Type: int64\n                SQL: SELECT cycle_number FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "cycle_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0071",
      "content": "Column Query: show cycle_number\n                Intent: display cycle_number data from profiles\n                Context: Limited view of cycle_number column data\n                Table: profiles\n                Column: cycle_number\n                Data Type: int64\n                SQL: SELECT cycle_number FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "cycle_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0072",
      "content": "Column Query: list cycle_number\n                Intent: list unique cycle_number values\n                Context: Unique values in cycle_number column\n                Table: profiles\n                Column: cycle_number\n                Data Type: int64\n                SQL: SELECT DISTINCT cycle_number FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "cycle_number",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0073",
      "content": "Column Query: get profile_direction\n                Intent: retrieve profile_direction values from profiles\n                Context: Direct access to profile_direction column in profiles table\n                Table: profiles\n                Column: profile_direction\n                Data Type: object\n                SQL: SELECT profile_direction FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_direction",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0074",
      "content": "Column Query: show profile_direction\n                Intent: display profile_direction data from profiles\n                Context: Limited view of profile_direction column data\n                Table: profiles\n                Column: profile_direction\n                Data Type: object\n                SQL: SELECT profile_direction FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_direction",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0075",
      "content": "Column Query: list profile_direction\n                Intent: list unique profile_direction values\n                Context: Unique values in profile_direction column\n                Table: profiles\n                Column: profile_direction\n                Data Type: object\n                SQL: SELECT DISTINCT profile_direction FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_direction",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0076",
      "content": "Column Query: get profile_date\n                Intent: retrieve profile_date values from profiles\n                Context: Direct access to profile_date column in profiles table\n                Table: profiles\n                Column: profile_date\n                Data Type: object\n                SQL: SELECT profile_date FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0077",
      "content": "Column Query: show profile_date\n                Intent: display profile_date data from profiles\n                Context: Limited view of profile_date column data\n                Table: profiles\n                Column: profile_date\n                Data Type: object\n                SQL: SELECT profile_date FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0078",
      "content": "Column Query: list profile_date\n                Intent: list unique profile_date values\n                Context: Unique values in profile_date column\n                Table: profiles\n                Column: profile_date\n                Data Type: object\n                SQL: SELECT DISTINCT profile_date FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0079",
      "content": "Column Query: get latitude\n                Intent: retrieve latitude values from profiles\n                Context: Direct access to latitude column in profiles table\n                Table: profiles\n                Column: latitude\n                Data Type: float64\n                SQL: SELECT latitude FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0080",
      "content": "Column Query: show latitude\n                Intent: display latitude data from profiles\n                Context: Limited view of latitude column data\n                Table: profiles\n                Column: latitude\n                Data Type: float64\n                SQL: SELECT latitude FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0081",
      "content": "Column Query: list latitude\n                Intent: list unique latitude values\n                Context: Unique values in latitude column\n                Table: profiles\n                Column: latitude\n                Data Type: float64\n                SQL: SELECT DISTINCT latitude FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "latitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0082",
      "content": "Column Query: get longitude\n                Intent: retrieve longitude values from profiles\n                Context: Direct access to longitude column in profiles table\n                Table: profiles\n                Column: longitude\n                Data Type: float64\n                SQL: SELECT longitude FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0083",
      "content": "Column Query: show longitude\n                Intent: display longitude data from profiles\n                Context: Limited view of longitude column data\n                Table: profiles\n                Column: longitude\n                Data Type: float64\n                SQL: SELECT longitude FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0084",
      "content": "Column Query: list longitude\n                Intent: list unique longitude values\n                Context: Unique values in longitude column\n                Table: profiles\n                Column: longitude\n                Data Type: float64\n                SQL: SELECT DISTINCT longitude FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "longitude",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0085",
      "content": "Column Query: get max_pressure\n                Intent: retrieve max_pressure values from profiles\n                Context: Direct access to max_pressure column in profiles table\n                Table: profiles\n                Column: max_pressure\n                Data Type: float64\n                SQL: SELECT max_pressure FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "max_pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0086",
      "content": "Column Query: show max_pressure\n                Intent: display max_pressure data from profiles\n                Context: Limited view of max_pressure column data\n                Table: profiles\n                Column: max_pressure\n                Data Type: float64\n                SQL: SELECT max_pressure FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "max_pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0087",
      "content": "Column Query: list max_pressure\n                Intent: list unique max_pressure values\n                Context: Unique values in max_pressure column\n                Table: profiles\n                Column: max_pressure\n                Data Type: float64\n                SQL: SELECT DISTINCT max_pressure FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "max_pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0088",
      "content": "Column Query: get num_levels\n                Intent: retrieve num_levels values from profiles\n                Context: Direct access to num_levels column in profiles table\n                Table: profiles\n                Column: num_levels\n                Data Type: int64\n                SQL: SELECT num_levels FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "num_levels",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0089",
      "content": "Column Query: show num_levels\n                Intent: display num_levels data from profiles\n                Context: Limited view of num_levels column data\n                Table: profiles\n                Column: num_levels\n                Data Type: int64\n                SQL: SELECT num_levels FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "num_levels",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0090",
      "content": "Column Query: list num_levels\n                Intent: list unique num_levels values\n                Context: Unique values in num_levels column\n                Table: profiles\n                Column: num_levels\n                Data Type: int64\n                SQL: SELECT DISTINCT num_levels FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "num_levels",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0091",
      "content": "Column Query: get vertical_sampling_scheme\n                Intent: retrieve vertical_sampling_scheme values from profiles\n                Context: Direct access to vertical_sampling_scheme column in profiles table\n                Table: profiles\n                Column: vertical_sampling_scheme\n                Data Type: object\n                SQL: SELECT vertical_sampling_scheme FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "vertical_sampling_scheme",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0092",
      "content": "Column Query: show vertical_sampling_scheme\n                Intent: display vertical_sampling_scheme data from profiles\n                Context: Limited view of vertical_sampling_scheme column data\n                Table: profiles\n                Column: vertical_sampling_scheme\n                Data Type: object\n                SQL: SELECT vertical_sampling_scheme FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "vertical_sampling_scheme",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0093",
      "content": "Column Query: list vertical_sampling_scheme\n                Intent: list unique vertical_sampling_scheme values\n                Context: Unique values in vertical_sampling_scheme column\n                Table: profiles\n                Column: vertical_sampling_scheme\n                Data Type: object\n                SQL: SELECT DISTINCT vertical_sampling_scheme FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "vertical_sampling_scheme",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0094",
      "content": "Column Query: get data_mode\n                Intent: retrieve data_mode values from profiles\n                Context: Direct access to data_mode column in profiles table\n                Table: profiles\n                Column: data_mode\n                Data Type: object\n                SQL: SELECT data_mode FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_mode",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0095",
      "content": "Column Query: show data_mode\n                Intent: display data_mode data from profiles\n                Context: Limited view of data_mode column data\n                Table: profiles\n                Column: data_mode\n                Data Type: object\n                SQL: SELECT data_mode FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_mode",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0096",
      "content": "Column Query: list data_mode\n                Intent: list unique data_mode values\n                Context: Unique values in data_mode column\n                Table: profiles\n                Column: data_mode\n                Data Type: object\n                SQL: SELECT DISTINCT data_mode FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_mode",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0097",
      "content": "Column Query: get data_quality_flag\n                Intent: retrieve data_quality_flag values from profiles\n                Context: Direct access to data_quality_flag column in profiles table\n                Table: profiles\n                Column: data_quality_flag\n                Data Type: int64\n                SQL: SELECT data_quality_flag FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_quality_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0098",
      "content": "Column Query: show data_quality_flag\n                Intent: display data_quality_flag data from profiles\n                Context: Limited view of data_quality_flag column data\n                Table: profiles\n                Column: data_quality_flag\n                Data Type: int64\n                SQL: SELECT data_quality_flag FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_quality_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0099",
      "content": "Column Query: list data_quality_flag\n                Intent: list unique data_quality_flag values\n                Context: Unique values in data_quality_flag column\n                Table: profiles\n                Column: data_quality_flag\n                Data Type: int64\n                SQL: SELECT DISTINCT data_quality_flag FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "data_quality_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0100",
      "content": "Column Query: get processing_date\n                Intent: retrieve processing_date values from profiles\n                Context: Direct access to processing_date column in profiles table\n                Table: profiles\n                Column: processing_date\n                Data Type: object\n                SQL: SELECT processing_date FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "processing_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0101",
      "content": "Column Query: show processing_date\n                Intent: display processing_date data from profiles\n                Context: Limited view of processing_date column data\n                Table: profiles\n                Column: processing_date\n                Data Type: object\n                SQL: SELECT processing_date FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "processing_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0102",
      "content": "Column Query: list processing_date\n                Intent: list unique processing_date values\n                Context: Unique values in processing_date column\n                Table: profiles\n                Column: processing_date\n                Data Type: object\n                SQL: SELECT DISTINCT processing_date FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "processing_date",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0103",
      "content": "Column Query: get netcdf_filename\n                Intent: retrieve netcdf_filename values from profiles\n                Context: Direct access to netcdf_filename column in profiles table\n                Table: profiles\n                Column: netcdf_filename\n                Data Type: object\n                SQL: SELECT netcdf_filename FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "netcdf_filename",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0104",
      "content": "Column Query: show netcdf_filename\n                Intent: display netcdf_filename data from profiles\n                Context: Limited view of netcdf_filename column data\n                Table: profiles\n                Column: netcdf_filename\n                Data Type: object\n                SQL: SELECT netcdf_filename FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "netcdf_filename",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0105",
      "content": "Column Query: list netcdf_filename\n                Intent: list unique netcdf_filename values\n                Context: Unique values in netcdf_filename column\n                Table: profiles\n                Column: netcdf_filename\n                Data Type: object\n                SQL: SELECT DISTINCT netcdf_filename FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "netcdf_filename",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0106",
      "content": "Column Query: get file_checksum\n                Intent: retrieve file_checksum values from profiles\n                Context: Direct access to file_checksum column in profiles table\n                Table: profiles\n                Column: file_checksum\n                Data Type: object\n                SQL: SELECT file_checksum FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "file_checksum",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0107",
      "content": "Column Query: show file_checksum\n                Intent: display file_checksum data from profiles\n                Context: Limited view of file_checksum column data\n                Table: profiles\n                Column: file_checksum\n                Data Type: object\n                SQL: SELECT file_checksum FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "file_checksum",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0108",
      "content": "Column Query: list file_checksum\n                Intent: list unique file_checksum values\n                Context: Unique values in file_checksum column\n                Table: profiles\n                Column: file_checksum\n                Data Type: object\n                SQL: SELECT DISTINCT file_checksum FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "file_checksum",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0109",
      "content": "Column Query: get profile_summary\n                Intent: retrieve profile_summary values from profiles\n                Context: Direct access to profile_summary column in profiles table\n                Table: profiles\n                Column: profile_summary\n                Data Type: object\n                SQL: SELECT profile_summary FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0110",
      "content": "Column Query: show profile_summary\n                Intent: display profile_summary data from profiles\n                Context: Limited view of profile_summary column data\n                Table: profiles\n                Column: profile_summary\n                Data Type: object\n                SQL: SELECT profile_summary FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0111",
      "content": "Column Query: list profile_summary\n                Intent: list unique profile_summary values\n                Context: Unique values in profile_summary column\n                Table: profiles\n                Column: profile_summary\n                Data Type: object\n                SQL: SELECT DISTINCT profile_summary FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "profile_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0112",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from profiles\n                Context: Direct access to created_at column in profiles table\n                Table: profiles\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0113",
      "content": "Column Query: show created_at\n                Intent: display created_at data from profiles\n                Context: Limited view of created_at column data\n                Table: profiles\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0114",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: profiles\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0115",
      "content": "Column Query: get updated_at\n                Intent: retrieve updated_at values from profiles\n                Context: Direct access to updated_at column in profiles table\n                Table: profiles\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0116",
      "content": "Column Query: show updated_at\n                Intent: display updated_at data from profiles\n                Context: Limited view of updated_at column data\n                Table: profiles\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM profiles LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0117",
      "content": "Column Query: list updated_at\n                Intent: list unique updated_at values\n                Context: Unique values in updated_at column\n                Table: profiles\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT DISTINCT updated_at FROM profiles\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "profiles",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0118",
      "content": "Column Query: get measurement_id\n                Intent: retrieve measurement_id values from measurements\n                Context: Direct access to measurement_id column in measurements table\n                Table: measurements\n                Column: measurement_id\n                Data Type: int64\n                SQL: SELECT measurement_id FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0119",
      "content": "Column Query: show measurement_id\n                Intent: display measurement_id data from measurements\n                Context: Limited view of measurement_id column data\n                Table: measurements\n                Column: measurement_id\n                Data Type: int64\n                SQL: SELECT measurement_id FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0120",
      "content": "Column Query: list measurement_id\n                Intent: list unique measurement_id values\n                Context: Unique values in measurement_id column\n                Table: measurements\n                Column: measurement_id\n                Data Type: int64\n                SQL: SELECT DISTINCT measurement_id FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0121",
      "content": "Column Query: get profile_id\n                Intent: retrieve profile_id values from measurements\n                Context: Direct access to profile_id column in measurements table\n                Table: measurements\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT profile_id FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0122",
      "content": "Column Query: show profile_id\n                Intent: display profile_id data from measurements\n                Context: Limited view of profile_id column data\n                Table: measurements\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT profile_id FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0123",
      "content": "Column Query: list profile_id\n                Intent: list unique profile_id values\n                Context: Unique values in profile_id column\n                Table: measurements\n                Column: profile_id\n                Data Type: int64\n                SQL: SELECT DISTINCT profile_id FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "profile_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0124",
      "content": "Column Query: get pressure\n                Intent: retrieve pressure values from measurements\n                Context: Direct access to pressure column in measurements table\n                Table: measurements\n                Column: pressure\n                Data Type: float64\n                SQL: SELECT pressure FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0125",
      "content": "Column Query: show pressure\n                Intent: display pressure data from measurements\n                Context: Limited view of pressure column data\n                Table: measurements\n                Column: pressure\n                Data Type: float64\n                SQL: SELECT pressure FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0126",
      "content": "Column Query: list pressure\n                Intent: list unique pressure values\n                Context: Unique values in pressure column\n                Table: measurements\n                Column: pressure\n                Data Type: float64\n                SQL: SELECT DISTINCT pressure FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0127",
      "content": "Column Query: get depth\n                Intent: retrieve depth values from measurements\n                Context: Direct access to depth column in measurements table\n                Table: measurements\n                Column: depth\n                Data Type: float64\n                SQL: SELECT depth FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0128",
      "content": "Column Query: show depth\n                Intent: display depth data from measurements\n                Context: Limited view of depth column data\n                Table: measurements\n                Column: depth\n                Data Type: float64\n                SQL: SELECT depth FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0129",
      "content": "Column Query: list depth\n                Intent: list unique depth values\n                Context: Unique values in depth column\n                Table: measurements\n                Column: depth\n                Data Type: float64\n                SQL: SELECT DISTINCT depth FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0130",
      "content": "Column Query: get pressure_qc\n                Intent: retrieve pressure_qc values from measurements\n                Context: Direct access to pressure_qc column in measurements table\n                Table: measurements\n                Column: pressure_qc\n                Data Type: int64\n                SQL: SELECT pressure_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0131",
      "content": "Column Query: show pressure_qc\n                Intent: display pressure_qc data from measurements\n                Context: Limited view of pressure_qc column data\n                Table: measurements\n                Column: pressure_qc\n                Data Type: int64\n                SQL: SELECT pressure_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0132",
      "content": "Column Query: list pressure_qc\n                Intent: list unique pressure_qc values\n                Context: Unique values in pressure_qc column\n                Table: measurements\n                Column: pressure_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT pressure_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "pressure_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0133",
      "content": "Column Query: get temperature\n                Intent: retrieve temperature values from measurements\n                Context: Direct access to temperature column in measurements table\n                Table: measurements\n                Column: temperature\n                Data Type: float64\n                SQL: SELECT temperature FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0134",
      "content": "Column Query: show temperature\n                Intent: display temperature data from measurements\n                Context: Limited view of temperature column data\n                Table: measurements\n                Column: temperature\n                Data Type: float64\n                SQL: SELECT temperature FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0135",
      "content": "Column Query: list temperature\n                Intent: list unique temperature values\n                Context: Unique values in temperature column\n                Table: measurements\n                Column: temperature\n                Data Type: float64\n                SQL: SELECT DISTINCT temperature FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0136",
      "content": "Column Query: get temperature_qc\n                Intent: retrieve temperature_qc values from measurements\n                Context: Direct access to temperature_qc column in measurements table\n                Table: measurements\n                Column: temperature_qc\n                Data Type: int64\n                SQL: SELECT temperature_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0137",
      "content": "Column Query: show temperature_qc\n                Intent: display temperature_qc data from measurements\n                Context: Limited view of temperature_qc column data\n                Table: measurements\n                Column: temperature_qc\n                Data Type: int64\n                SQL: SELECT temperature_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0138",
      "content": "Column Query: list temperature_qc\n                Intent: list unique temperature_qc values\n                Context: Unique values in temperature_qc column\n                Table: measurements\n                Column: temperature_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT temperature_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "temperature_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0139",
      "content": "Column Query: get salinity\n                Intent: retrieve salinity values from measurements\n                Context: Direct access to salinity column in measurements table\n                Table: measurements\n                Column: salinity\n                Data Type: float64\n                SQL: SELECT salinity FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0140",
      "content": "Column Query: show salinity\n                Intent: display salinity data from measurements\n                Context: Limited view of salinity column data\n                Table: measurements\n                Column: salinity\n                Data Type: float64\n                SQL: SELECT salinity FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0141",
      "content": "Column Query: list salinity\n                Intent: list unique salinity values\n                Context: Unique values in salinity column\n                Table: measurements\n                Column: salinity\n                Data Type: float64\n                SQL: SELECT DISTINCT salinity FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "float64"
      }
    },
    {
      "id": "col_0142",
      "content": "Column Query: get salinity_qc\n                Intent: retrieve salinity_qc values from measurements\n                Context: Direct access to salinity_qc column in measurements table\n                Table: measurements\n                Column: salinity_qc\n                Data Type: int64\n                SQL: SELECT salinity_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0143",
      "content": "Column Query: show salinity_qc\n                Intent: display salinity_qc data from measurements\n                Context: Limited view of salinity_qc column data\n                Table: measurements\n                Column: salinity_qc\n                Data Type: int64\n                SQL: SELECT salinity_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0144",
      "content": "Column Query: list salinity_qc\n                Intent: list unique salinity_qc values\n                Context: Unique values in salinity_qc column\n                Table: measurements\n                Column: salinity_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT salinity_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "salinity_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0145",
      "content": "Column Query: get dissolved_oxygen\n                Intent: retrieve dissolved_oxygen values from measurements\n                Context: Direct access to dissolved_oxygen column in measurements table\n                Table: measurements\n                Column: dissolved_oxygen\n                Data Type: object\n                SQL: SELECT dissolved_oxygen FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0146",
      "content": "Column Query: show dissolved_oxygen\n                Intent: display dissolved_oxygen data from measurements\n                Context: Limited view of dissolved_oxygen column data\n                Table: measurements\n                Column: dissolved_oxygen\n                Data Type: object\n                SQL: SELECT dissolved_oxygen FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0147",
      "content": "Column Query: list dissolved_oxygen\n                Intent: list unique dissolved_oxygen values\n                Context: Unique values in dissolved_oxygen column\n                Table: measurements\n                Column: dissolved_oxygen\n                Data Type: object\n                SQL: SELECT DISTINCT dissolved_oxygen FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0148",
      "content": "Column Query: get dissolved_oxygen_qc\n                Intent: retrieve dissolved_oxygen_qc values from measurements\n                Context: Direct access to dissolved_oxygen_qc column in measurements table\n                Table: measurements\n                Column: dissolved_oxygen_qc\n                Data Type: int64\n                SQL: SELECT dissolved_oxygen_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0149",
      "content": "Column Query: show dissolved_oxygen_qc\n                Intent: display dissolved_oxygen_qc data from measurements\n                Context: Limited view of dissolved_oxygen_qc column data\n                Table: measurements\n                Column: dissolved_oxygen_qc\n                Data Type: int64\n                SQL: SELECT dissolved_oxygen_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0150",
      "content": "Column Query: list dissolved_oxygen_qc\n                Intent: list unique dissolved_oxygen_qc values\n                Context: Unique values in dissolved_oxygen_qc column\n                Table: measurements\n                Column: dissolved_oxygen_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT dissolved_oxygen_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "dissolved_oxygen_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0151",
      "content": "Column Query: get ph_in_situ\n                Intent: retrieve ph_in_situ values from measurements\n                Context: Direct access to ph_in_situ column in measurements table\n                Table: measurements\n                Column: ph_in_situ\n                Data Type: object\n                SQL: SELECT ph_in_situ FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0152",
      "content": "Column Query: show ph_in_situ\n                Intent: display ph_in_situ data from measurements\n                Context: Limited view of ph_in_situ column data\n                Table: measurements\n                Column: ph_in_situ\n                Data Type: object\n                SQL: SELECT ph_in_situ FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0153",
      "content": "Column Query: list ph_in_situ\n                Intent: list unique ph_in_situ values\n                Context: Unique values in ph_in_situ column\n                Table: measurements\n                Column: ph_in_situ\n                Data Type: object\n                SQL: SELECT DISTINCT ph_in_situ FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0154",
      "content": "Column Query: get ph_in_situ_qc\n                Intent: retrieve ph_in_situ_qc values from measurements\n                Context: Direct access to ph_in_situ_qc column in measurements table\n                Table: measurements\n                Column: ph_in_situ_qc\n                Data Type: int64\n                SQL: SELECT ph_in_situ_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0155",
      "content": "Column Query: show ph_in_situ_qc\n                Intent: display ph_in_situ_qc data from measurements\n                Context: Limited view of ph_in_situ_qc column data\n                Table: measurements\n                Column: ph_in_situ_qc\n                Data Type: int64\n                SQL: SELECT ph_in_situ_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0156",
      "content": "Column Query: list ph_in_situ_qc\n                Intent: list unique ph_in_situ_qc values\n                Context: Unique values in ph_in_situ_qc column\n                Table: measurements\n                Column: ph_in_situ_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT ph_in_situ_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "ph_in_situ_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0157",
      "content": "Column Query: get chlorophyll_a\n                Intent: retrieve chlorophyll_a values from measurements\n                Context: Direct access to chlorophyll_a column in measurements table\n                Table: measurements\n                Column: chlorophyll_a\n                Data Type: object\n                SQL: SELECT chlorophyll_a FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0158",
      "content": "Column Query: show chlorophyll_a\n                Intent: display chlorophyll_a data from measurements\n                Context: Limited view of chlorophyll_a column data\n                Table: measurements\n                Column: chlorophyll_a\n                Data Type: object\n                SQL: SELECT chlorophyll_a FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0159",
      "content": "Column Query: list chlorophyll_a\n                Intent: list unique chlorophyll_a values\n                Context: Unique values in chlorophyll_a column\n                Table: measurements\n                Column: chlorophyll_a\n                Data Type: object\n                SQL: SELECT DISTINCT chlorophyll_a FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0160",
      "content": "Column Query: get chlorophyll_a_qc\n                Intent: retrieve chlorophyll_a_qc values from measurements\n                Context: Direct access to chlorophyll_a_qc column in measurements table\n                Table: measurements\n                Column: chlorophyll_a_qc\n                Data Type: int64\n                SQL: SELECT chlorophyll_a_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0161",
      "content": "Column Query: show chlorophyll_a_qc\n                Intent: display chlorophyll_a_qc data from measurements\n                Context: Limited view of chlorophyll_a_qc column data\n                Table: measurements\n                Column: chlorophyll_a_qc\n                Data Type: int64\n                SQL: SELECT chlorophyll_a_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0162",
      "content": "Column Query: list chlorophyll_a_qc\n                Intent: list unique chlorophyll_a_qc values\n                Context: Unique values in chlorophyll_a_qc column\n                Table: measurements\n                Column: chlorophyll_a_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT chlorophyll_a_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "chlorophyll_a_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0163",
      "content": "Column Query: get particle_backscattering\n                Intent: retrieve particle_backscattering values from measurements\n                Context: Direct access to particle_backscattering column in measurements table\n                Table: measurements\n                Column: particle_backscattering\n                Data Type: object\n                SQL: SELECT particle_backscattering FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0164",
      "content": "Column Query: show particle_backscattering\n                Intent: display particle_backscattering data from measurements\n                Context: Limited view of particle_backscattering column data\n                Table: measurements\n                Column: particle_backscattering\n                Data Type: object\n                SQL: SELECT particle_backscattering FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0165",
      "content": "Column Query: list particle_backscattering\n                Intent: list unique particle_backscattering values\n                Context: Unique values in particle_backscattering column\n                Table: measurements\n                Column: particle_backscattering\n                Data Type: object\n                SQL: SELECT DISTINCT particle_backscattering FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0166",
      "content": "Column Query: get particle_backscattering_qc\n                Intent: retrieve particle_backscattering_qc values from measurements\n                Context: Direct access to particle_backscattering_qc column in measurements table\n                Table: measurements\n                Column: particle_backscattering_qc\n                Data Type: int64\n                SQL: SELECT particle_backscattering_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0167",
      "content": "Column Query: show particle_backscattering_qc\n                Intent: display particle_backscattering_qc data from measurements\n                Context: Limited view of particle_backscattering_qc column data\n                Table: measurements\n                Column: particle_backscattering_qc\n                Data Type: int64\n                SQL: SELECT particle_backscattering_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0168",
      "content": "Column Query: list particle_backscattering_qc\n                Intent: list unique particle_backscattering_qc values\n                Context: Unique values in particle_backscattering_qc column\n                Table: measurements\n                Column: particle_backscattering_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT particle_backscattering_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "particle_backscattering_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0169",
      "content": "Column Query: get downward_irradiance\n                Intent: retrieve downward_irradiance values from measurements\n                Context: Direct access to downward_irradiance column in measurements table\n                Table: measurements\n                Column: downward_irradiance\n                Data Type: object\n                SQL: SELECT downward_irradiance FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0170",
      "content": "Column Query: show downward_irradiance\n                Intent: display downward_irradiance data from measurements\n                Context: Limited view of downward_irradiance column data\n                Table: measurements\n                Column: downward_irradiance\n                Data Type: object\n                SQL: SELECT downward_irradiance FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0171",
      "content": "Column Query: list downward_irradiance\n                Intent: list unique downward_irradiance values\n                Context: Unique values in downward_irradiance column\n                Table: measurements\n                Column: downward_irradiance\n                Data Type: object\n                SQL: SELECT DISTINCT downward_irradiance FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0172",
      "content": "Column Query: get downward_irradiance_qc\n                Intent: retrieve downward_irradiance_qc values from measurements\n                Context: Direct access to downward_irradiance_qc column in measurements table\n                Table: measurements\n                Column: downward_irradiance_qc\n                Data Type: int64\n                SQL: SELECT downward_irradiance_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0173",
      "content": "Column Query: show downward_irradiance_qc\n                Intent: display downward_irradiance_qc data from measurements\n                Context: Limited view of downward_irradiance_qc column data\n                Table: measurements\n                Column: downward_irradiance_qc\n                Data Type: int64\n                SQL: SELECT downward_irradiance_qc FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0174",
      "content": "Column Query: list downward_irradiance_qc\n                Intent: list unique downward_irradiance_qc values\n                Context: Unique values in downward_irradiance_qc column\n                Table: measurements\n                Column: downward_irradiance_qc\n                Data Type: int64\n                SQL: SELECT DISTINCT downward_irradiance_qc FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "downward_irradiance_qc",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0175",
      "content": "Column Query: get potential_temperature\n                Intent: retrieve potential_temperature values from measurements\n                Context: Direct access to potential_temperature column in measurements table\n                Table: measurements\n                Column: potential_temperature\n                Data Type: object\n                SQL: SELECT potential_temperature FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0176",
      "content": "Column Query: show potential_temperature\n                Intent: display potential_temperature data from measurements\n                Context: Limited view of potential_temperature column data\n                Table: measurements\n                Column: potential_temperature\n                Data Type: object\n                SQL: SELECT potential_temperature FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0177",
      "content": "Column Query: list potential_temperature\n                Intent: list unique potential_temperature values\n                Context: Unique values in potential_temperature column\n                Table: measurements\n                Column: potential_temperature\n                Data Type: object\n                SQL: SELECT DISTINCT potential_temperature FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_temperature",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0178",
      "content": "Column Query: get potential_density\n                Intent: retrieve potential_density values from measurements\n                Context: Direct access to potential_density column in measurements table\n                Table: measurements\n                Column: potential_density\n                Data Type: object\n                SQL: SELECT potential_density FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_density",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0179",
      "content": "Column Query: show potential_density\n                Intent: display potential_density data from measurements\n                Context: Limited view of potential_density column data\n                Table: measurements\n                Column: potential_density\n                Data Type: object\n                SQL: SELECT potential_density FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_density",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0180",
      "content": "Column Query: list potential_density\n                Intent: list unique potential_density values\n                Context: Unique values in potential_density column\n                Table: measurements\n                Column: potential_density\n                Data Type: object\n                SQL: SELECT DISTINCT potential_density FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "potential_density",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0181",
      "content": "Column Query: get buoyancy_frequency\n                Intent: retrieve buoyancy_frequency values from measurements\n                Context: Direct access to buoyancy_frequency column in measurements table\n                Table: measurements\n                Column: buoyancy_frequency\n                Data Type: object\n                SQL: SELECT buoyancy_frequency FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "buoyancy_frequency",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0182",
      "content": "Column Query: show buoyancy_frequency\n                Intent: display buoyancy_frequency data from measurements\n                Context: Limited view of buoyancy_frequency column data\n                Table: measurements\n                Column: buoyancy_frequency\n                Data Type: object\n                SQL: SELECT buoyancy_frequency FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "buoyancy_frequency",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0183",
      "content": "Column Query: list buoyancy_frequency\n                Intent: list unique buoyancy_frequency values\n                Context: Unique values in buoyancy_frequency column\n                Table: measurements\n                Column: buoyancy_frequency\n                Data Type: object\n                SQL: SELECT DISTINCT buoyancy_frequency FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "buoyancy_frequency",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0184",
      "content": "Column Query: get mixed_layer_depth\n                Intent: retrieve mixed_layer_depth values from measurements\n                Context: Direct access to mixed_layer_depth column in measurements table\n                Table: measurements\n                Column: mixed_layer_depth\n                Data Type: object\n                SQL: SELECT mixed_layer_depth FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "mixed_layer_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0185",
      "content": "Column Query: show mixed_layer_depth\n                Intent: display mixed_layer_depth data from measurements\n                Context: Limited view of mixed_layer_depth column data\n                Table: measurements\n                Column: mixed_layer_depth\n                Data Type: object\n                SQL: SELECT mixed_layer_depth FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "mixed_layer_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0186",
      "content": "Column Query: list mixed_layer_depth\n                Intent: list unique mixed_layer_depth values\n                Context: Unique values in mixed_layer_depth column\n                Table: measurements\n                Column: mixed_layer_depth\n                Data Type: object\n                SQL: SELECT DISTINCT mixed_layer_depth FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "mixed_layer_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0187",
      "content": "Column Query: get processing_level\n                Intent: retrieve processing_level values from measurements\n                Context: Direct access to processing_level column in measurements table\n                Table: measurements\n                Column: processing_level\n                Data Type: object\n                SQL: SELECT processing_level FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "processing_level",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0188",
      "content": "Column Query: show processing_level\n                Intent: display processing_level data from measurements\n                Context: Limited view of processing_level column data\n                Table: measurements\n                Column: processing_level\n                Data Type: object\n                SQL: SELECT processing_level FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "processing_level",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0189",
      "content": "Column Query: list processing_level\n                Intent: list unique processing_level values\n                Context: Unique values in processing_level column\n                Table: measurements\n                Column: processing_level\n                Data Type: object\n                SQL: SELECT DISTINCT processing_level FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "processing_level",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0190",
      "content": "Column Query: get interpolated\n                Intent: retrieve interpolated values from measurements\n                Context: Direct access to interpolated column in measurements table\n                Table: measurements\n                Column: interpolated\n                Data Type: int64\n                SQL: SELECT interpolated FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "interpolated",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0191",
      "content": "Column Query: show interpolated\n                Intent: display interpolated data from measurements\n                Context: Limited view of interpolated column data\n                Table: measurements\n                Column: interpolated\n                Data Type: int64\n                SQL: SELECT interpolated FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "interpolated",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0192",
      "content": "Column Query: list interpolated\n                Intent: list unique interpolated values\n                Context: Unique values in interpolated column\n                Table: measurements\n                Column: interpolated\n                Data Type: int64\n                SQL: SELECT DISTINCT interpolated FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "interpolated",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0193",
      "content": "Column Query: get spike_test_flag\n                Intent: retrieve spike_test_flag values from measurements\n                Context: Direct access to spike_test_flag column in measurements table\n                Table: measurements\n                Column: spike_test_flag\n                Data Type: int64\n                SQL: SELECT spike_test_flag FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "spike_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0194",
      "content": "Column Query: show spike_test_flag\n                Intent: display spike_test_flag data from measurements\n                Context: Limited view of spike_test_flag column data\n                Table: measurements\n                Column: spike_test_flag\n                Data Type: int64\n                SQL: SELECT spike_test_flag FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "spike_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0195",
      "content": "Column Query: list spike_test_flag\n                Intent: list unique spike_test_flag values\n                Context: Unique values in spike_test_flag column\n                Table: measurements\n                Column: spike_test_flag\n                Data Type: int64\n                SQL: SELECT DISTINCT spike_test_flag FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "spike_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0196",
      "content": "Column Query: get gradient_test_flag\n                Intent: retrieve gradient_test_flag values from measurements\n                Context: Direct access to gradient_test_flag column in measurements table\n                Table: measurements\n                Column: gradient_test_flag\n                Data Type: int64\n                SQL: SELECT gradient_test_flag FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "gradient_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0197",
      "content": "Column Query: show gradient_test_flag\n                Intent: display gradient_test_flag data from measurements\n                Context: Limited view of gradient_test_flag column data\n                Table: measurements\n                Column: gradient_test_flag\n                Data Type: int64\n                SQL: SELECT gradient_test_flag FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "gradient_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0198",
      "content": "Column Query: list gradient_test_flag\n                Intent: list unique gradient_test_flag values\n                Context: Unique values in gradient_test_flag column\n                Table: measurements\n                Column: gradient_test_flag\n                Data Type: int64\n                SQL: SELECT DISTINCT gradient_test_flag FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "gradient_test_flag",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0199",
      "content": "Column Query: get parameter_summary\n                Intent: retrieve parameter_summary values from measurements\n                Context: Direct access to parameter_summary column in measurements table\n                Table: measurements\n                Column: parameter_summary\n                Data Type: object\n                SQL: SELECT parameter_summary FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "parameter_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0200",
      "content": "Column Query: show parameter_summary\n                Intent: display parameter_summary data from measurements\n                Context: Limited view of parameter_summary column data\n                Table: measurements\n                Column: parameter_summary\n                Data Type: object\n                SQL: SELECT parameter_summary FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "parameter_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0201",
      "content": "Column Query: list parameter_summary\n                Intent: list unique parameter_summary values\n                Context: Unique values in parameter_summary column\n                Table: measurements\n                Column: parameter_summary\n                Data Type: object\n                SQL: SELECT DISTINCT parameter_summary FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "parameter_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0202",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from measurements\n                Context: Direct access to created_at column in measurements table\n                Table: measurements\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0203",
      "content": "Column Query: show created_at\n                Intent: display created_at data from measurements\n                Context: Limited view of created_at column data\n                Table: measurements\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM measurements LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0204",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: measurements\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM measurements\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "measurements",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0205",
      "content": "Column Query: get summary_id\n                Intent: retrieve summary_id values from spatial_summaries\n                Context: Direct access to summary_id column in spatial_summaries table\n                Table: spatial_summaries\n                Column: summary_id\n                Data Type: object\n                SQL: SELECT summary_id FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "summary_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0206",
      "content": "Column Query: show summary_id\n                Intent: display summary_id data from spatial_summaries\n                Context: Limited view of summary_id column data\n                Table: spatial_summaries\n                Column: summary_id\n                Data Type: object\n                SQL: SELECT summary_id FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "summary_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0207",
      "content": "Column Query: list summary_id\n                Intent: list unique summary_id values\n                Context: Unique values in summary_id column\n                Table: spatial_summaries\n                Column: summary_id\n                Data Type: object\n                SQL: SELECT DISTINCT summary_id FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "summary_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0208",
      "content": "Column Query: get grid_lat_min\n                Intent: retrieve grid_lat_min values from spatial_summaries\n                Context: Direct access to grid_lat_min column in spatial_summaries table\n                Table: spatial_summaries\n                Column: grid_lat_min\n                Data Type: object\n                SQL: SELECT grid_lat_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0209",
      "content": "Column Query: show grid_lat_min\n                Intent: display grid_lat_min data from spatial_summaries\n                Context: Limited view of grid_lat_min column data\n                Table: spatial_summaries\n                Column: grid_lat_min\n                Data Type: object\n                SQL: SELECT grid_lat_min FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0210",
      "content": "Column Query: list grid_lat_min\n                Intent: list unique grid_lat_min values\n                Context: Unique values in grid_lat_min column\n                Table: spatial_summaries\n                Column: grid_lat_min\n                Data Type: object\n                SQL: SELECT DISTINCT grid_lat_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0211",
      "content": "Column Query: get grid_lon_min\n                Intent: retrieve grid_lon_min values from spatial_summaries\n                Context: Direct access to grid_lon_min column in spatial_summaries table\n                Table: spatial_summaries\n                Column: grid_lon_min\n                Data Type: object\n                SQL: SELECT grid_lon_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0212",
      "content": "Column Query: show grid_lon_min\n                Intent: display grid_lon_min data from spatial_summaries\n                Context: Limited view of grid_lon_min column data\n                Table: spatial_summaries\n                Column: grid_lon_min\n                Data Type: object\n                SQL: SELECT grid_lon_min FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0213",
      "content": "Column Query: list grid_lon_min\n                Intent: list unique grid_lon_min values\n                Context: Unique values in grid_lon_min column\n                Table: spatial_summaries\n                Column: grid_lon_min\n                Data Type: object\n                SQL: SELECT DISTINCT grid_lon_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0214",
      "content": "Column Query: get grid_lat_max\n                Intent: retrieve grid_lat_max values from spatial_summaries\n                Context: Direct access to grid_lat_max column in spatial_summaries table\n                Table: spatial_summaries\n                Column: grid_lat_max\n                Data Type: object\n                SQL: SELECT grid_lat_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0215",
      "content": "Column Query: show grid_lat_max\n                Intent: display grid_lat_max data from spatial_summaries\n                Context: Limited view of grid_lat_max column data\n                Table: spatial_summaries\n                Column: grid_lat_max\n                Data Type: object\n                SQL: SELECT grid_lat_max FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0216",
      "content": "Column Query: list grid_lat_max\n                Intent: list unique grid_lat_max values\n                Context: Unique values in grid_lat_max column\n                Table: spatial_summaries\n                Column: grid_lat_max\n                Data Type: object\n                SQL: SELECT DISTINCT grid_lat_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lat_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0217",
      "content": "Column Query: get grid_lon_max\n                Intent: retrieve grid_lon_max values from spatial_summaries\n                Context: Direct access to grid_lon_max column in spatial_summaries table\n                Table: spatial_summaries\n                Column: grid_lon_max\n                Data Type: object\n                SQL: SELECT grid_lon_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0218",
      "content": "Column Query: show grid_lon_max\n                Intent: display grid_lon_max data from spatial_summaries\n                Context: Limited view of grid_lon_max column data\n                Table: spatial_summaries\n                Column: grid_lon_max\n                Data Type: object\n                SQL: SELECT grid_lon_max FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0219",
      "content": "Column Query: list grid_lon_max\n                Intent: list unique grid_lon_max values\n                Context: Unique values in grid_lon_max column\n                Table: spatial_summaries\n                Column: grid_lon_max\n                Data Type: object\n                SQL: SELECT DISTINCT grid_lon_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "grid_lon_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0220",
      "content": "Column Query: get time_period_start\n                Intent: retrieve time_period_start values from spatial_summaries\n                Context: Direct access to time_period_start column in spatial_summaries table\n                Table: spatial_summaries\n                Column: time_period_start\n                Data Type: object\n                SQL: SELECT time_period_start FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_start",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0221",
      "content": "Column Query: show time_period_start\n                Intent: display time_period_start data from spatial_summaries\n                Context: Limited view of time_period_start column data\n                Table: spatial_summaries\n                Column: time_period_start\n                Data Type: object\n                SQL: SELECT time_period_start FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_start",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0222",
      "content": "Column Query: list time_period_start\n                Intent: list unique time_period_start values\n                Context: Unique values in time_period_start column\n                Table: spatial_summaries\n                Column: time_period_start\n                Data Type: object\n                SQL: SELECT DISTINCT time_period_start FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_start",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0223",
      "content": "Column Query: get time_period_end\n                Intent: retrieve time_period_end values from spatial_summaries\n                Context: Direct access to time_period_end column in spatial_summaries table\n                Table: spatial_summaries\n                Column: time_period_end\n                Data Type: object\n                SQL: SELECT time_period_end FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_end",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0224",
      "content": "Column Query: show time_period_end\n                Intent: display time_period_end data from spatial_summaries\n                Context: Limited view of time_period_end column data\n                Table: spatial_summaries\n                Column: time_period_end\n                Data Type: object\n                SQL: SELECT time_period_end FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_end",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0225",
      "content": "Column Query: list time_period_end\n                Intent: list unique time_period_end values\n                Context: Unique values in time_period_end column\n                Table: spatial_summaries\n                Column: time_period_end\n                Data Type: object\n                SQL: SELECT DISTINCT time_period_end FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "time_period_end",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0226",
      "content": "Column Query: get temporal_resolution\n                Intent: retrieve temporal_resolution values from spatial_summaries\n                Context: Direct access to temporal_resolution column in spatial_summaries table\n                Table: spatial_summaries\n                Column: temporal_resolution\n                Data Type: object\n                SQL: SELECT temporal_resolution FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temporal_resolution",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0227",
      "content": "Column Query: show temporal_resolution\n                Intent: display temporal_resolution data from spatial_summaries\n                Context: Limited view of temporal_resolution column data\n                Table: spatial_summaries\n                Column: temporal_resolution\n                Data Type: object\n                SQL: SELECT temporal_resolution FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temporal_resolution",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0228",
      "content": "Column Query: list temporal_resolution\n                Intent: list unique temporal_resolution values\n                Context: Unique values in temporal_resolution column\n                Table: spatial_summaries\n                Column: temporal_resolution\n                Data Type: object\n                SQL: SELECT DISTINCT temporal_resolution FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temporal_resolution",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0229",
      "content": "Column Query: get profile_count\n                Intent: retrieve profile_count values from spatial_summaries\n                Context: Direct access to profile_count column in spatial_summaries table\n                Table: spatial_summaries\n                Column: profile_count\n                Data Type: object\n                SQL: SELECT profile_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "profile_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0230",
      "content": "Column Query: show profile_count\n                Intent: display profile_count data from spatial_summaries\n                Context: Limited view of profile_count column data\n                Table: spatial_summaries\n                Column: profile_count\n                Data Type: object\n                SQL: SELECT profile_count FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "profile_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0231",
      "content": "Column Query: list profile_count\n                Intent: list unique profile_count values\n                Context: Unique values in profile_count column\n                Table: spatial_summaries\n                Column: profile_count\n                Data Type: object\n                SQL: SELECT DISTINCT profile_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "profile_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0232",
      "content": "Column Query: get float_count\n                Intent: retrieve float_count values from spatial_summaries\n                Context: Direct access to float_count column in spatial_summaries table\n                Table: spatial_summaries\n                Column: float_count\n                Data Type: object\n                SQL: SELECT float_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "float_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0233",
      "content": "Column Query: show float_count\n                Intent: display float_count data from spatial_summaries\n                Context: Limited view of float_count column data\n                Table: spatial_summaries\n                Column: float_count\n                Data Type: object\n                SQL: SELECT float_count FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "float_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0234",
      "content": "Column Query: list float_count\n                Intent: list unique float_count values\n                Context: Unique values in float_count column\n                Table: spatial_summaries\n                Column: float_count\n                Data Type: object\n                SQL: SELECT DISTINCT float_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "float_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0235",
      "content": "Column Query: get measurement_count\n                Intent: retrieve measurement_count values from spatial_summaries\n                Context: Direct access to measurement_count column in spatial_summaries table\n                Table: spatial_summaries\n                Column: measurement_count\n                Data Type: object\n                SQL: SELECT measurement_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "measurement_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0236",
      "content": "Column Query: show measurement_count\n                Intent: display measurement_count data from spatial_summaries\n                Context: Limited view of measurement_count column data\n                Table: spatial_summaries\n                Column: measurement_count\n                Data Type: object\n                SQL: SELECT measurement_count FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "measurement_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0237",
      "content": "Column Query: list measurement_count\n                Intent: list unique measurement_count values\n                Context: Unique values in measurement_count column\n                Table: spatial_summaries\n                Column: measurement_count\n                Data Type: object\n                SQL: SELECT DISTINCT measurement_count FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "measurement_count",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0238",
      "content": "Column Query: get temp_mean\n                Intent: retrieve temp_mean values from spatial_summaries\n                Context: Direct access to temp_mean column in spatial_summaries table\n                Table: spatial_summaries\n                Column: temp_mean\n                Data Type: object\n                SQL: SELECT temp_mean FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0239",
      "content": "Column Query: show temp_mean\n                Intent: display temp_mean data from spatial_summaries\n                Context: Limited view of temp_mean column data\n                Table: spatial_summaries\n                Column: temp_mean\n                Data Type: object\n                SQL: SELECT temp_mean FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0240",
      "content": "Column Query: list temp_mean\n                Intent: list unique temp_mean values\n                Context: Unique values in temp_mean column\n                Table: spatial_summaries\n                Column: temp_mean\n                Data Type: object\n                SQL: SELECT DISTINCT temp_mean FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0241",
      "content": "Column Query: get temp_std\n                Intent: retrieve temp_std values from spatial_summaries\n                Context: Direct access to temp_std column in spatial_summaries table\n                Table: spatial_summaries\n                Column: temp_std\n                Data Type: object\n                SQL: SELECT temp_std FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0242",
      "content": "Column Query: show temp_std\n                Intent: display temp_std data from spatial_summaries\n                Context: Limited view of temp_std column data\n                Table: spatial_summaries\n                Column: temp_std\n                Data Type: object\n                SQL: SELECT temp_std FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0243",
      "content": "Column Query: list temp_std\n                Intent: list unique temp_std values\n                Context: Unique values in temp_std column\n                Table: spatial_summaries\n                Column: temp_std\n                Data Type: object\n                SQL: SELECT DISTINCT temp_std FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0244",
      "content": "Column Query: get temp_min\n                Intent: retrieve temp_min values from spatial_summaries\n                Context: Direct access to temp_min column in spatial_summaries table\n                Table: spatial_summaries\n                Column: temp_min\n                Data Type: object\n                SQL: SELECT temp_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0245",
      "content": "Column Query: show temp_min\n                Intent: display temp_min data from spatial_summaries\n                Context: Limited view of temp_min column data\n                Table: spatial_summaries\n                Column: temp_min\n                Data Type: object\n                SQL: SELECT temp_min FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0246",
      "content": "Column Query: list temp_min\n                Intent: list unique temp_min values\n                Context: Unique values in temp_min column\n                Table: spatial_summaries\n                Column: temp_min\n                Data Type: object\n                SQL: SELECT DISTINCT temp_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0247",
      "content": "Column Query: get temp_max\n                Intent: retrieve temp_max values from spatial_summaries\n                Context: Direct access to temp_max column in spatial_summaries table\n                Table: spatial_summaries\n                Column: temp_max\n                Data Type: object\n                SQL: SELECT temp_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0248",
      "content": "Column Query: show temp_max\n                Intent: display temp_max data from spatial_summaries\n                Context: Limited view of temp_max column data\n                Table: spatial_summaries\n                Column: temp_max\n                Data Type: object\n                SQL: SELECT temp_max FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0249",
      "content": "Column Query: list temp_max\n                Intent: list unique temp_max values\n                Context: Unique values in temp_max column\n                Table: spatial_summaries\n                Column: temp_max\n                Data Type: object\n                SQL: SELECT DISTINCT temp_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "temp_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0250",
      "content": "Column Query: get sal_mean\n                Intent: retrieve sal_mean values from spatial_summaries\n                Context: Direct access to sal_mean column in spatial_summaries table\n                Table: spatial_summaries\n                Column: sal_mean\n                Data Type: object\n                SQL: SELECT sal_mean FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0251",
      "content": "Column Query: show sal_mean\n                Intent: display sal_mean data from spatial_summaries\n                Context: Limited view of sal_mean column data\n                Table: spatial_summaries\n                Column: sal_mean\n                Data Type: object\n                SQL: SELECT sal_mean FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0252",
      "content": "Column Query: list sal_mean\n                Intent: list unique sal_mean values\n                Context: Unique values in sal_mean column\n                Table: spatial_summaries\n                Column: sal_mean\n                Data Type: object\n                SQL: SELECT DISTINCT sal_mean FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_mean",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0253",
      "content": "Column Query: get sal_std\n                Intent: retrieve sal_std values from spatial_summaries\n                Context: Direct access to sal_std column in spatial_summaries table\n                Table: spatial_summaries\n                Column: sal_std\n                Data Type: object\n                SQL: SELECT sal_std FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0254",
      "content": "Column Query: show sal_std\n                Intent: display sal_std data from spatial_summaries\n                Context: Limited view of sal_std column data\n                Table: spatial_summaries\n                Column: sal_std\n                Data Type: object\n                SQL: SELECT sal_std FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0255",
      "content": "Column Query: list sal_std\n                Intent: list unique sal_std values\n                Context: Unique values in sal_std column\n                Table: spatial_summaries\n                Column: sal_std\n                Data Type: object\n                SQL: SELECT DISTINCT sal_std FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_std",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0256",
      "content": "Column Query: get sal_min\n                Intent: retrieve sal_min values from spatial_summaries\n                Context: Direct access to sal_min column in spatial_summaries table\n                Table: spatial_summaries\n                Column: sal_min\n                Data Type: object\n                SQL: SELECT sal_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0257",
      "content": "Column Query: show sal_min\n                Intent: display sal_min data from spatial_summaries\n                Context: Limited view of sal_min column data\n                Table: spatial_summaries\n                Column: sal_min\n                Data Type: object\n                SQL: SELECT sal_min FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0258",
      "content": "Column Query: list sal_min\n                Intent: list unique sal_min values\n                Context: Unique values in sal_min column\n                Table: spatial_summaries\n                Column: sal_min\n                Data Type: object\n                SQL: SELECT DISTINCT sal_min FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_min",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0259",
      "content": "Column Query: get sal_max\n                Intent: retrieve sal_max values from spatial_summaries\n                Context: Direct access to sal_max column in spatial_summaries table\n                Table: spatial_summaries\n                Column: sal_max\n                Data Type: object\n                SQL: SELECT sal_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0260",
      "content": "Column Query: show sal_max\n                Intent: display sal_max data from spatial_summaries\n                Context: Limited view of sal_max column data\n                Table: spatial_summaries\n                Column: sal_max\n                Data Type: object\n                SQL: SELECT sal_max FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0261",
      "content": "Column Query: list sal_max\n                Intent: list unique sal_max values\n                Context: Unique values in sal_max column\n                Table: spatial_summaries\n                Column: sal_max\n                Data Type: object\n                SQL: SELECT DISTINCT sal_max FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "sal_max",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0262",
      "content": "Column Query: get max_depth\n                Intent: retrieve max_depth values from spatial_summaries\n                Context: Direct access to max_depth column in spatial_summaries table\n                Table: spatial_summaries\n                Column: max_depth\n                Data Type: object\n                SQL: SELECT max_depth FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "max_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0263",
      "content": "Column Query: show max_depth\n                Intent: display max_depth data from spatial_summaries\n                Context: Limited view of max_depth column data\n                Table: spatial_summaries\n                Column: max_depth\n                Data Type: object\n                SQL: SELECT max_depth FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "max_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0264",
      "content": "Column Query: list max_depth\n                Intent: list unique max_depth values\n                Context: Unique values in max_depth column\n                Table: spatial_summaries\n                Column: max_depth\n                Data Type: object\n                SQL: SELECT DISTINCT max_depth FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "max_depth",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0265",
      "content": "Column Query: get quality_score\n                Intent: retrieve quality_score values from spatial_summaries\n                Context: Direct access to quality_score column in spatial_summaries table\n                Table: spatial_summaries\n                Column: quality_score\n                Data Type: object\n                SQL: SELECT quality_score FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "quality_score",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0266",
      "content": "Column Query: show quality_score\n                Intent: display quality_score data from spatial_summaries\n                Context: Limited view of quality_score column data\n                Table: spatial_summaries\n                Column: quality_score\n                Data Type: object\n                SQL: SELECT quality_score FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "quality_score",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0267",
      "content": "Column Query: list quality_score\n                Intent: list unique quality_score values\n                Context: Unique values in quality_score column\n                Table: spatial_summaries\n                Column: quality_score\n                Data Type: object\n                SQL: SELECT DISTINCT quality_score FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "quality_score",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0268",
      "content": "Column Query: get real_time_ratio\n                Intent: retrieve real_time_ratio values from spatial_summaries\n                Context: Direct access to real_time_ratio column in spatial_summaries table\n                Table: spatial_summaries\n                Column: real_time_ratio\n                Data Type: object\n                SQL: SELECT real_time_ratio FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "real_time_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0269",
      "content": "Column Query: show real_time_ratio\n                Intent: display real_time_ratio data from spatial_summaries\n                Context: Limited view of real_time_ratio column data\n                Table: spatial_summaries\n                Column: real_time_ratio\n                Data Type: object\n                SQL: SELECT real_time_ratio FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "real_time_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0270",
      "content": "Column Query: list real_time_ratio\n                Intent: list unique real_time_ratio values\n                Context: Unique values in real_time_ratio column\n                Table: spatial_summaries\n                Column: real_time_ratio\n                Data Type: object\n                SQL: SELECT DISTINCT real_time_ratio FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "real_time_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0271",
      "content": "Column Query: get delayed_mode_ratio\n                Intent: retrieve delayed_mode_ratio values from spatial_summaries\n                Context: Direct access to delayed_mode_ratio column in spatial_summaries table\n                Table: spatial_summaries\n                Column: delayed_mode_ratio\n                Data Type: object\n                SQL: SELECT delayed_mode_ratio FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "delayed_mode_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0272",
      "content": "Column Query: show delayed_mode_ratio\n                Intent: display delayed_mode_ratio data from spatial_summaries\n                Context: Limited view of delayed_mode_ratio column data\n                Table: spatial_summaries\n                Column: delayed_mode_ratio\n                Data Type: object\n                SQL: SELECT delayed_mode_ratio FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "delayed_mode_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0273",
      "content": "Column Query: list delayed_mode_ratio\n                Intent: list unique delayed_mode_ratio values\n                Context: Unique values in delayed_mode_ratio column\n                Table: spatial_summaries\n                Column: delayed_mode_ratio\n                Data Type: object\n                SQL: SELECT DISTINCT delayed_mode_ratio FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "delayed_mode_ratio",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0274",
      "content": "Column Query: get spatial_pattern_summary\n                Intent: retrieve spatial_pattern_summary values from spatial_summaries\n                Context: Direct access to spatial_pattern_summary column in spatial_summaries table\n                Table: spatial_summaries\n                Column: spatial_pattern_summary\n                Data Type: object\n                SQL: SELECT spatial_pattern_summary FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "spatial_pattern_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0275",
      "content": "Column Query: show spatial_pattern_summary\n                Intent: display spatial_pattern_summary data from spatial_summaries\n                Context: Limited view of spatial_pattern_summary column data\n                Table: spatial_summaries\n                Column: spatial_pattern_summary\n                Data Type: object\n                SQL: SELECT spatial_pattern_summary FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "spatial_pattern_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0276",
      "content": "Column Query: list spatial_pattern_summary\n                Intent: list unique spatial_pattern_summary values\n                Context: Unique values in spatial_pattern_summary column\n                Table: spatial_summaries\n                Column: spatial_pattern_summary\n                Data Type: object\n                SQL: SELECT DISTINCT spatial_pattern_summary FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "spatial_pattern_summary",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0277",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from spatial_summaries\n                Context: Direct access to created_at column in spatial_summaries table\n                Table: spatial_summaries\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0278",
      "content": "Column Query: show created_at\n                Intent: display created_at data from spatial_summaries\n                Context: Limited view of created_at column data\n                Table: spatial_summaries\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0279",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: spatial_summaries\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0280",
      "content": "Column Query: get updated_at\n                Intent: retrieve updated_at values from spatial_summaries\n                Context: Direct access to updated_at column in spatial_summaries table\n                Table: spatial_summaries\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0281",
      "content": "Column Query: show updated_at\n                Intent: display updated_at data from spatial_summaries\n                Context: Limited view of updated_at column data\n                Table: spatial_summaries\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT updated_at FROM spatial_summaries LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0282",
      "content": "Column Query: list updated_at\n                Intent: list unique updated_at values\n                Context: Unique values in updated_at column\n                Table: spatial_summaries\n                Column: updated_at\n                Data Type: object\n                SQL: SELECT DISTINCT updated_at FROM spatial_summaries\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "spatial_summaries",
        "column": "updated_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0283",
      "content": "Column Query: get test_id\n                Intent: retrieve test_id values from quality_control_tests\n                Context: Direct access to test_id column in quality_control_tests table\n                Table: quality_control_tests\n                Column: test_id\n                Data Type: int64\n                SQL: SELECT test_id FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0284",
      "content": "Column Query: show test_id\n                Intent: display test_id data from quality_control_tests\n                Context: Limited view of test_id column data\n                Table: quality_control_tests\n                Column: test_id\n                Data Type: int64\n                SQL: SELECT test_id FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0285",
      "content": "Column Query: list test_id\n                Intent: list unique test_id values\n                Context: Unique values in test_id column\n                Table: quality_control_tests\n                Column: test_id\n                Data Type: int64\n                SQL: SELECT DISTINCT test_id FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "int64"
      }
    },
    {
      "id": "col_0286",
      "content": "Column Query: get test_name\n                Intent: retrieve test_name values from quality_control_tests\n                Context: Direct access to test_name column in quality_control_tests table\n                Table: quality_control_tests\n                Column: test_name\n                Data Type: object\n                SQL: SELECT test_name FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0287",
      "content": "Column Query: show test_name\n                Intent: display test_name data from quality_control_tests\n                Context: Limited view of test_name column data\n                Table: quality_control_tests\n                Column: test_name\n                Data Type: object\n                SQL: SELECT test_name FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0288",
      "content": "Column Query: list test_name\n                Intent: list unique test_name values\n                Context: Unique values in test_name column\n                Table: quality_control_tests\n                Column: test_name\n                Data Type: object\n                SQL: SELECT DISTINCT test_name FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_name",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0289",
      "content": "Column Query: get test_description\n                Intent: retrieve test_description values from quality_control_tests\n                Context: Direct access to test_description column in quality_control_tests table\n                Table: quality_control_tests\n                Column: test_description\n                Data Type: object\n                SQL: SELECT test_description FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_description",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0290",
      "content": "Column Query: show test_description\n                Intent: display test_description data from quality_control_tests\n                Context: Limited view of test_description column data\n                Table: quality_control_tests\n                Column: test_description\n                Data Type: object\n                SQL: SELECT test_description FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_description",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0291",
      "content": "Column Query: list test_description\n                Intent: list unique test_description values\n                Context: Unique values in test_description column\n                Table: quality_control_tests\n                Column: test_description\n                Data Type: object\n                SQL: SELECT DISTINCT test_description FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_description",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0292",
      "content": "Column Query: get test_category\n                Intent: retrieve test_category values from quality_control_tests\n                Context: Direct access to test_category column in quality_control_tests table\n                Table: quality_control_tests\n                Column: test_category\n                Data Type: object\n                SQL: SELECT test_category FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_category",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0293",
      "content": "Column Query: show test_category\n                Intent: display test_category data from quality_control_tests\n                Context: Limited view of test_category column data\n                Table: quality_control_tests\n                Column: test_category\n                Data Type: object\n                SQL: SELECT test_category FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_category",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0294",
      "content": "Column Query: list test_category\n                Intent: list unique test_category values\n                Context: Unique values in test_category column\n                Table: quality_control_tests\n                Column: test_category\n                Data Type: object\n                SQL: SELECT DISTINCT test_category FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_category",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0295",
      "content": "Column Query: get test_parameters\n                Intent: retrieve test_parameters values from quality_control_tests\n                Context: Direct access to test_parameters column in quality_control_tests table\n                Table: quality_control_tests\n                Column: test_parameters\n                Data Type: object\n                SQL: SELECT test_parameters FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_parameters",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0296",
      "content": "Column Query: show test_parameters\n                Intent: display test_parameters data from quality_control_tests\n                Context: Limited view of test_parameters column data\n                Table: quality_control_tests\n                Column: test_parameters\n                Data Type: object\n                SQL: SELECT test_parameters FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_parameters",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0297",
      "content": "Column Query: list test_parameters\n                Intent: list unique test_parameters values\n                Context: Unique values in test_parameters column\n                Table: quality_control_tests\n                Column: test_parameters\n                Data Type: object\n                SQL: SELECT DISTINCT test_parameters FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "test_parameters",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0298",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from quality_control_tests\n                Context: Direct access to created_at column in quality_control_tests table\n                Table: quality_control_tests\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0299",
      "content": "Column Query: show created_at\n                Intent: display created_at data from quality_control_tests\n                Context: Limited view of created_at column data\n                Table: quality_control_tests\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM quality_control_tests LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0300",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: quality_control_tests\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM quality_control_tests\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_tests",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0301",
      "content": "Column Query: get result_id\n                Intent: retrieve result_id values from quality_control_results\n                Context: Direct access to result_id column in quality_control_results table\n                Table: quality_control_results\n                Column: result_id\n                Data Type: object\n                SQL: SELECT result_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "result_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0302",
      "content": "Column Query: show result_id\n                Intent: display result_id data from quality_control_results\n                Context: Limited view of result_id column data\n                Table: quality_control_results\n                Column: result_id\n                Data Type: object\n                SQL: SELECT result_id FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "result_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0303",
      "content": "Column Query: list result_id\n                Intent: list unique result_id values\n                Context: Unique values in result_id column\n                Table: quality_control_results\n                Column: result_id\n                Data Type: object\n                SQL: SELECT DISTINCT result_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "result_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0304",
      "content": "Column Query: get measurement_id\n                Intent: retrieve measurement_id values from quality_control_results\n                Context: Direct access to measurement_id column in quality_control_results table\n                Table: quality_control_results\n                Column: measurement_id\n                Data Type: object\n                SQL: SELECT measurement_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0305",
      "content": "Column Query: show measurement_id\n                Intent: display measurement_id data from quality_control_results\n                Context: Limited view of measurement_id column data\n                Table: quality_control_results\n                Column: measurement_id\n                Data Type: object\n                SQL: SELECT measurement_id FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0306",
      "content": "Column Query: list measurement_id\n                Intent: list unique measurement_id values\n                Context: Unique values in measurement_id column\n                Table: quality_control_results\n                Column: measurement_id\n                Data Type: object\n                SQL: SELECT DISTINCT measurement_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "measurement_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0307",
      "content": "Column Query: get test_id\n                Intent: retrieve test_id values from quality_control_results\n                Context: Direct access to test_id column in quality_control_results table\n                Table: quality_control_results\n                Column: test_id\n                Data Type: object\n                SQL: SELECT test_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0308",
      "content": "Column Query: show test_id\n                Intent: display test_id data from quality_control_results\n                Context: Limited view of test_id column data\n                Table: quality_control_results\n                Column: test_id\n                Data Type: object\n                SQL: SELECT test_id FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0309",
      "content": "Column Query: list test_id\n                Intent: list unique test_id values\n                Context: Unique values in test_id column\n                Table: quality_control_results\n                Column: test_id\n                Data Type: object\n                SQL: SELECT DISTINCT test_id FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_id",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0310",
      "content": "Column Query: get test_result\n                Intent: retrieve test_result values from quality_control_results\n                Context: Direct access to test_result column in quality_control_results table\n                Table: quality_control_results\n                Column: test_result\n                Data Type: object\n                SQL: SELECT test_result FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_result",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0311",
      "content": "Column Query: show test_result\n                Intent: display test_result data from quality_control_results\n                Context: Limited view of test_result column data\n                Table: quality_control_results\n                Column: test_result\n                Data Type: object\n                SQL: SELECT test_result FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_result",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0312",
      "content": "Column Query: list test_result\n                Intent: list unique test_result values\n                Context: Unique values in test_result column\n                Table: quality_control_results\n                Column: test_result\n                Data Type: object\n                SQL: SELECT DISTINCT test_result FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_result",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0313",
      "content": "Column Query: get test_details\n                Intent: retrieve test_details values from quality_control_results\n                Context: Direct access to test_details column in quality_control_results table\n                Table: quality_control_results\n                Column: test_details\n                Data Type: object\n                SQL: SELECT test_details FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_details",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0314",
      "content": "Column Query: show test_details\n                Intent: display test_details data from quality_control_results\n                Context: Limited view of test_details column data\n                Table: quality_control_results\n                Column: test_details\n                Data Type: object\n                SQL: SELECT test_details FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_details",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0315",
      "content": "Column Query: list test_details\n                Intent: list unique test_details values\n                Context: Unique values in test_details column\n                Table: quality_control_results\n                Column: test_details\n                Data Type: object\n                SQL: SELECT DISTINCT test_details FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "test_details",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0316",
      "content": "Column Query: get created_at\n                Intent: retrieve created_at values from quality_control_results\n                Context: Direct access to created_at column in quality_control_results table\n                Table: quality_control_results\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0317",
      "content": "Column Query: show created_at\n                Intent: display created_at data from quality_control_results\n                Context: Limited view of created_at column data\n                Table: quality_control_results\n                Column: created_at\n                Data Type: object\n                SQL: SELECT created_at FROM quality_control_results LIMIT 100\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "col_0318",
      "content": "Column Query: list created_at\n                Intent: list unique created_at values\n                Context: Unique values in created_at column\n                Table: quality_control_results\n                Column: created_at\n                Data Type: object\n                SQL: SELECT DISTINCT created_at FROM quality_control_results\n                Usage: Direct column access for data extraction",
      "metadata": {
        "type": "column_query",
        "table": "quality_control_results",
        "column": "created_at",
        "category": "direct_access",
        "complexity": "simple",
        "data_type": "object"
      }
    },
    {
      "id": "float_0319",
      "content": "Float Query: all floats\n                Intent: retrieve all float records\n                Table: floats\n                SQL: SELECT * FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve all float records"
      }
    },
    {
      "id": "float_0320",
      "content": "Float Query: show all floats\n                Intent: retrieve all float records\n                Table: floats\n                SQL: SELECT * FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve all float records"
      }
    },
    {
      "id": "float_0321",
      "content": "Float Query: get floats\n                Intent: retrieve all float records\n                Table: floats\n                SQL: SELECT * FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve all float records"
      }
    },
    {
      "id": "float_0322",
      "content": "Float Query: list floats\n                Intent: retrieve all float records\n                Table: floats\n                SQL: SELECT * FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve all float records"
      }
    },
    {
      "id": "float_0323",
      "content": "Float Query: float data\n                Intent: retrieve all float records\n                Table: floats\n                SQL: SELECT * FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve all float records"
      }
    },
    {
      "id": "float_0324",
      "content": "Float Query: float identifiers\n                Intent: get float identification numbers\n                Table: floats\n                SQL: SELECT float_id FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "get float identification numbers"
      }
    },
    {
      "id": "float_0325",
      "content": "Float Query: float id\n                Intent: get float identification numbers\n                Table: floats\n                SQL: SELECT float_id FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "get float identification numbers"
      }
    },
    {
      "id": "float_0326",
      "content": "Float Query: float ids\n                Intent: get float identification numbers\n                Table: floats\n                SQL: SELECT float_id FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "get float identification numbers"
      }
    },
    {
      "id": "float_0327",
      "content": "Float Query: show float id\n                Intent: get float identification numbers\n                Table: floats\n                SQL: SELECT float_id FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "get float identification numbers"
      }
    },
    {
      "id": "float_0328",
      "content": "Float Query: get float identifiers\n                Intent: get float identification numbers\n                Table: floats\n                SQL: SELECT float_id FROM floats\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "get float identification numbers"
      }
    },
    {
      "id": "float_0329",
      "content": "Float Query: active floats\n                Intent: retrieve operational floats\n                Table: floats\n                SQL: SELECT * FROM floats WHERE current_status = 'ACTIVE'\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve operational floats"
      }
    },
    {
      "id": "float_0330",
      "content": "Float Query: operational floats\n                Intent: retrieve operational floats\n                Table: floats\n                SQL: SELECT * FROM floats WHERE current_status = 'ACTIVE'\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve operational floats"
      }
    },
    {
      "id": "float_0331",
      "content": "Float Query: working floats\n                Intent: retrieve operational floats\n                Table: floats\n                SQL: SELECT * FROM floats WHERE current_status = 'ACTIVE'\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve operational floats"
      }
    },
    {
      "id": "float_0332",
      "content": "Float Query: live floats\n                Intent: retrieve operational floats\n                Table: floats\n                SQL: SELECT * FROM floats WHERE current_status = 'ACTIVE'\n                Context: ARGO float database query for float information\n                Usage: Extract float data from the floats table\n                Related Columns: float_id, wmo_number, program_name, platform_type, data_assembly_center, deployment_date, deployment_latitude, deployment_longitude, deployment_depth, current_status, last_latitude, last_longitude, last_update, cycle_time_days, park_pressure_dbar, profile_pressure_dbar, total_profiles, quality_profiles, metadata_text, created_at, updated_at",
      "metadata": {
        "type": "table_query",
        "table": "floats",
        "category": "float_operations",
        "complexity": "simple",
        "intent": "retrieve operational floats"
      }
    },
    {
      "id": "meas_0333",
      "content": "Measurement Query: temperature data\n                Intent: retrieve quality temperature measurements\n                Table: measurements\n                SQL: SELECT temperature FROM measurements WHERE temperature_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality temperature measurements"
      }
    },
    {
      "id": "meas_0334",
      "content": "Measurement Query: temp data\n                Intent: retrieve quality temperature measurements\n                Table: measurements\n                SQL: SELECT temperature FROM measurements WHERE temperature_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality temperature measurements"
      }
    },
    {
      "id": "meas_0335",
      "content": "Measurement Query: temperature values\n                Intent: retrieve quality temperature measurements\n                Table: measurements\n                SQL: SELECT temperature FROM measurements WHERE temperature_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality temperature measurements"
      }
    },
    {
      "id": "meas_0336",
      "content": "Measurement Query: get temperature\n                Intent: retrieve quality temperature measurements\n                Table: measurements\n                SQL: SELECT temperature FROM measurements WHERE temperature_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality temperature measurements"
      }
    },
    {
      "id": "meas_0337",
      "content": "Measurement Query: show temperature\n                Intent: retrieve quality temperature measurements\n                Table: measurements\n                SQL: SELECT temperature FROM measurements WHERE temperature_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality temperature measurements"
      }
    },
    {
      "id": "meas_0338",
      "content": "Measurement Query: salinity data\n                Intent: retrieve quality salinity measurements\n                Table: measurements\n                SQL: SELECT salinity FROM measurements WHERE salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality salinity measurements"
      }
    },
    {
      "id": "meas_0339",
      "content": "Measurement Query: sal data\n                Intent: retrieve quality salinity measurements\n                Table: measurements\n                SQL: SELECT salinity FROM measurements WHERE salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality salinity measurements"
      }
    },
    {
      "id": "meas_0340",
      "content": "Measurement Query: salinity values\n                Intent: retrieve quality salinity measurements\n                Table: measurements\n                SQL: SELECT salinity FROM measurements WHERE salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality salinity measurements"
      }
    },
    {
      "id": "meas_0341",
      "content": "Measurement Query: get salinity\n                Intent: retrieve quality salinity measurements\n                Table: measurements\n                SQL: SELECT salinity FROM measurements WHERE salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality salinity measurements"
      }
    },
    {
      "id": "meas_0342",
      "content": "Measurement Query: show salinity\n                Intent: retrieve quality salinity measurements\n                Table: measurements\n                SQL: SELECT salinity FROM measurements WHERE salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality salinity measurements"
      }
    },
    {
      "id": "meas_0343",
      "content": "Measurement Query: pressure data\n                Intent: retrieve pressure measurements\n                Table: measurements\n                SQL: SELECT pressure FROM measurements\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve pressure measurements"
      }
    },
    {
      "id": "meas_0344",
      "content": "Measurement Query: pressure values\n                Intent: retrieve pressure measurements\n                Table: measurements\n                SQL: SELECT pressure FROM measurements\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve pressure measurements"
      }
    },
    {
      "id": "meas_0345",
      "content": "Measurement Query: get pressure\n                Intent: retrieve pressure measurements\n                Table: measurements\n                SQL: SELECT pressure FROM measurements\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve pressure measurements"
      }
    },
    {
      "id": "meas_0346",
      "content": "Measurement Query: show pressure\n                Intent: retrieve pressure measurements\n                Table: measurements\n                SQL: SELECT pressure FROM measurements\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve pressure measurements"
      }
    },
    {
      "id": "meas_0347",
      "content": "Measurement Query: depth data\n                Intent: retrieve pressure measurements\n                Table: measurements\n                SQL: SELECT pressure FROM measurements\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve pressure measurements"
      }
    },
    {
      "id": "meas_0348",
      "content": "Measurement Query: measurement data\n                Intent: retrieve quality oceanographic measurements\n                Table: measurements\n                SQL: SELECT pressure, temperature, salinity FROM measurements WHERE temperature_qc <= 2 AND salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality oceanographic measurements"
      }
    },
    {
      "id": "meas_0349",
      "content": "Measurement Query: measurements\n                Intent: retrieve quality oceanographic measurements\n                Table: measurements\n                SQL: SELECT pressure, temperature, salinity FROM measurements WHERE temperature_qc <= 2 AND salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality oceanographic measurements"
      }
    },
    {
      "id": "meas_0350",
      "content": "Measurement Query: ocean data\n                Intent: retrieve quality oceanographic measurements\n                Table: measurements\n                SQL: SELECT pressure, temperature, salinity FROM measurements WHERE temperature_qc <= 2 AND salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality oceanographic measurements"
      }
    },
    {
      "id": "meas_0351",
      "content": "Measurement Query: sensor data\n                Intent: retrieve quality oceanographic measurements\n                Table: measurements\n                SQL: SELECT pressure, temperature, salinity FROM measurements WHERE temperature_qc <= 2 AND salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality oceanographic measurements"
      }
    },
    {
      "id": "meas_0352",
      "content": "Measurement Query: CTD data\n                Intent: retrieve quality oceanographic measurements\n                Table: measurements\n                SQL: SELECT pressure, temperature, salinity FROM measurements WHERE temperature_qc <= 2 AND salinity_qc <= 2\n                Context: Oceanographic measurement data from ARGO CTD sensors\n                Usage: Extract oceanographic parameters (temperature, salinity, pressure)\n                Quality Control: Includes quality flags for data reliability\n                Related Columns: measurement_id, profile_id, pressure, depth, pressure_qc, temperature, temperature_qc, salinity, salinity_qc, dissolved_oxygen, dissolved_oxygen_qc, ph_in_situ, ph_in_situ_qc, chlorophyll_a, chlorophyll_a_qc, particle_backscattering, particle_backscattering_qc, downward_irradiance, downward_irradiance_qc, potential_temperature, potential_density, buoyancy_frequency, mixed_layer_depth, processing_level, interpolated, spike_test_flag, gradient_test_flag, parameter_summary, created_at",
      "metadata": {
        "type": "measurement_query",
        "table": "measurements",
        "category": "oceanographic_data",
        "complexity": "simple",
        "intent": "retrieve quality oceanographic measurements"
      }
    },
    {
      "id": "count_0353",
      "content": "Count Query: count floats\n                Intent: count total floats records\n                Table: floats\n                SQL: SELECT COUNT(*) FROM floats\n                Context: Statistical count of records in floats table\n                Usage: Get total record count for floats\n                Total Records: 17",
      "metadata": {
        "type": "count_query",
        "table": "floats",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total floats records"
      }
    },
    {
      "id": "count_0354",
      "content": "Count Query: how many floats\n                Intent: count total floats records\n                Table: floats\n                SQL: SELECT COUNT(*) FROM floats\n                Context: Statistical count of records in floats table\n                Usage: Get total record count for floats\n                Total Records: 17",
      "metadata": {
        "type": "count_query",
        "table": "floats",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total floats records"
      }
    },
    {
      "id": "count_0355",
      "content": "Count Query: total floats\n                Intent: count total floats records\n                Table: floats\n                SQL: SELECT COUNT(*) FROM floats\n                Context: Statistical count of records in floats table\n                Usage: Get total record count for floats\n                Total Records: 17",
      "metadata": {
        "type": "count_query",
        "table": "floats",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total floats records"
      }
    },
    {
      "id": "count_0356",
      "content": "Count Query: number of floats\n                Intent: count total floats records\n                Table: floats\n                SQL: SELECT COUNT(*) FROM floats\n                Context: Statistical count of records in floats table\n                Usage: Get total record count for floats\n                Total Records: 17",
      "metadata": {
        "type": "count_query",
        "table": "floats",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total floats records"
      }
    },
    {
      "id": "count_0357",
      "content": "Count Query: count profiles\n                Intent: count total profiles records\n                Table: profiles\n                SQL: SELECT COUNT(*) FROM profiles\n                Context: Statistical count of records in profiles table\n                Usage: Get total record count for profiles\n                Total Records: 3130",
      "metadata": {
        "type": "count_query",
        "table": "profiles",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total profiles records"
      }
    },
    {
      "id": "count_0358",
      "content": "Count Query: how many profiles\n                Intent: count total profiles records\n                Table: profiles\n                SQL: SELECT COUNT(*) FROM profiles\n                Context: Statistical count of records in profiles table\n                Usage: Get total record count for profiles\n                Total Records: 3130",
      "metadata": {
        "type": "count_query",
        "table": "profiles",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total profiles records"
      }
    },
    {
      "id": "count_0359",
      "content": "Count Query: total profiles\n                Intent: count total profiles records\n                Table: profiles\n                SQL: SELECT COUNT(*) FROM profiles\n                Context: Statistical count of records in profiles table\n                Usage: Get total record count for profiles\n                Total Records: 3130",
      "metadata": {
        "type": "count_query",
        "table": "profiles",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total profiles records"
      }
    },
    {
      "id": "count_0360",
      "content": "Count Query: number of profiles\n                Intent: count total profiles records\n                Table: profiles\n                SQL: SELECT COUNT(*) FROM profiles\n                Context: Statistical count of records in profiles table\n                Usage: Get total record count for profiles\n                Total Records: 3130",
      "metadata": {
        "type": "count_query",
        "table": "profiles",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total profiles records"
      }
    },
    {
      "id": "count_0361",
      "content": "Count Query: count measurements\n                Intent: count total measurements records\n                Table: measurements\n                SQL: SELECT COUNT(*) FROM measurements\n                Context: Statistical count of records in measurements table\n                Usage: Get total record count for measurements\n                Total Records: 1425648",
      "metadata": {
        "type": "count_query",
        "table": "measurements",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total measurements records"
      }
    },
    {
      "id": "count_0362",
      "content": "Count Query: how many measurements\n                Intent: count total measurements records\n                Table: measurements\n                SQL: SELECT COUNT(*) FROM measurements\n                Context: Statistical count of records in measurements table\n                Usage: Get total record count for measurements\n                Total Records: 1425648",
      "metadata": {
        "type": "count_query",
        "table": "measurements",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total measurements records"
      }
    },
    {
      "id": "count_0363",
      "content": "Count Query: total measurements\n                Intent: count total measurements records\n                Table: measurements\n                SQL: SELECT COUNT(*) FROM measurements\n                Context: Statistical count of records in measurements table\n                Usage: Get total record count for measurements\n                Total Records: 1425648",
      "metadata": {
        "type": "count_query",
        "table": "measurements",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total measurements records"
      }
    },
    {
      "id": "count_0364",
      "content": "Count Query: number of measurements\n                Intent: count total measurements records\n                Table: measurements\n                SQL: SELECT COUNT(*) FROM measurements\n                Context: Statistical count of records in measurements table\n                Usage: Get total record count for measurements\n                Total Records: 1425648",
      "metadata": {
        "type": "count_query",
        "table": "measurements",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total measurements records"
      }
    },
    {
      "id": "count_0365",
      "content": "Count Query: count spatial_summaries\n                Intent: count total spatial_summaries records\n                Table: spatial_summaries\n                SQL: SELECT COUNT(*) FROM spatial_summaries\n                Context: Statistical count of records in spatial_summaries table\n                Usage: Get total record count for spatial_summaries\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "spatial_summaries",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total spatial_summaries records"
      }
    },
    {
      "id": "count_0366",
      "content": "Count Query: how many spatial_summaries\n                Intent: count total spatial_summaries records\n                Table: spatial_summaries\n                SQL: SELECT COUNT(*) FROM spatial_summaries\n                Context: Statistical count of records in spatial_summaries table\n                Usage: Get total record count for spatial_summaries\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "spatial_summaries",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total spatial_summaries records"
      }
    },
    {
      "id": "count_0367",
      "content": "Count Query: total spatial_summaries\n                Intent: count total spatial_summaries records\n                Table: spatial_summaries\n                SQL: SELECT COUNT(*) FROM spatial_summaries\n                Context: Statistical count of records in spatial_summaries table\n                Usage: Get total record count for spatial_summaries\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "spatial_summaries",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total spatial_summaries records"
      }
    },
    {
      "id": "count_0368",
      "content": "Count Query: number of spatial_summaries\n                Intent: count total spatial_summaries records\n                Table: spatial_summaries\n                SQL: SELECT COUNT(*) FROM spatial_summaries\n                Context: Statistical count of records in spatial_summaries table\n                Usage: Get total record count for spatial_summaries\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "spatial_summaries",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total spatial_summaries records"
      }
    },
    {
      "id": "count_0369",
      "content": "Count Query: count quality_control_tests\n                Intent: count total quality_control_tests records\n                Table: quality_control_tests\n                SQL: SELECT COUNT(*) FROM quality_control_tests\n                Context: Statistical count of records in quality_control_tests table\n                Usage: Get total record count for quality_control_tests\n                Total Records: 6",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_tests",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_tests records"
      }
    },
    {
      "id": "count_0370",
      "content": "Count Query: how many quality_control_tests\n                Intent: count total quality_control_tests records\n                Table: quality_control_tests\n                SQL: SELECT COUNT(*) FROM quality_control_tests\n                Context: Statistical count of records in quality_control_tests table\n                Usage: Get total record count for quality_control_tests\n                Total Records: 6",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_tests",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_tests records"
      }
    },
    {
      "id": "count_0371",
      "content": "Count Query: total quality_control_tests\n                Intent: count total quality_control_tests records\n                Table: quality_control_tests\n                SQL: SELECT COUNT(*) FROM quality_control_tests\n                Context: Statistical count of records in quality_control_tests table\n                Usage: Get total record count for quality_control_tests\n                Total Records: 6",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_tests",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_tests records"
      }
    },
    {
      "id": "count_0372",
      "content": "Count Query: number of quality_control_tests\n                Intent: count total quality_control_tests records\n                Table: quality_control_tests\n                SQL: SELECT COUNT(*) FROM quality_control_tests\n                Context: Statistical count of records in quality_control_tests table\n                Usage: Get total record count for quality_control_tests\n                Total Records: 6",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_tests",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_tests records"
      }
    },
    {
      "id": "count_0373",
      "content": "Count Query: count quality_control_results\n                Intent: count total quality_control_results records\n                Table: quality_control_results\n                SQL: SELECT COUNT(*) FROM quality_control_results\n                Context: Statistical count of records in quality_control_results table\n                Usage: Get total record count for quality_control_results\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_results",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_results records"
      }
    },
    {
      "id": "count_0374",
      "content": "Count Query: how many quality_control_results\n                Intent: count total quality_control_results records\n                Table: quality_control_results\n                SQL: SELECT COUNT(*) FROM quality_control_results\n                Context: Statistical count of records in quality_control_results table\n                Usage: Get total record count for quality_control_results\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_results",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_results records"
      }
    },
    {
      "id": "count_0375",
      "content": "Count Query: total quality_control_results\n                Intent: count total quality_control_results records\n                Table: quality_control_results\n                SQL: SELECT COUNT(*) FROM quality_control_results\n                Context: Statistical count of records in quality_control_results table\n                Usage: Get total record count for quality_control_results\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_results",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_results records"
      }
    },
    {
      "id": "count_0376",
      "content": "Count Query: number of quality_control_results\n                Intent: count total quality_control_results records\n                Table: quality_control_results\n                SQL: SELECT COUNT(*) FROM quality_control_results\n                Context: Statistical count of records in quality_control_results table\n                Usage: Get total record count for quality_control_results\n                Total Records: 0",
      "metadata": {
        "type": "count_query",
        "table": "quality_control_results",
        "category": "statistics",
        "complexity": "simple",
        "intent": "count total quality_control_results records"
      }
    },
    {
      "id": "join_0377",
      "content": "Join Query: float profiles\n            Intent: retrieve float profile relationships\n            Tables: Multiple tables with relationships\n            SQL: SELECT f.float_id, f.wmo_number, p.profile_id, p.profile_date FROM floats f JOIN profiles p ON f.float_id = p.float_id\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve float profile relationships"
      }
    },
    {
      "id": "join_0378",
      "content": "Join Query: profiles for floats\n            Intent: retrieve float profile relationships\n            Tables: Multiple tables with relationships\n            SQL: SELECT f.float_id, f.wmo_number, p.profile_id, p.profile_date FROM floats f JOIN profiles p ON f.float_id = p.float_id\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve float profile relationships"
      }
    },
    {
      "id": "join_0379",
      "content": "Join Query: float profile data\n            Intent: retrieve float profile relationships\n            Tables: Multiple tables with relationships\n            SQL: SELECT f.float_id, f.wmo_number, p.profile_id, p.profile_date FROM floats f JOIN profiles p ON f.float_id = p.float_id\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve float profile relationships"
      }
    },
    {
      "id": "join_0380",
      "content": "Join Query: linked profiles\n            Intent: retrieve float profile relationships\n            Tables: Multiple tables with relationships\n            SQL: SELECT f.float_id, f.wmo_number, p.profile_id, p.profile_date FROM floats f JOIN profiles p ON f.float_id = p.float_id\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve float profile relationships"
      }
    },
    {
      "id": "join_0381",
      "content": "Join Query: profile measurements\n            Intent: retrieve profile measurement data\n            Tables: Multiple tables with relationships\n            SQL: SELECT p.profile_id, p.profile_date, m.pressure, m.temperature, m.salinity FROM profiles p JOIN measurements m ON p.profile_id = m.profile_id WHERE m.temperature_qc <= 2\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve profile measurement data"
      }
    },
    {
      "id": "join_0382",
      "content": "Join Query: measurements for profiles\n            Intent: retrieve profile measurement data\n            Tables: Multiple tables with relationships\n            SQL: SELECT p.profile_id, p.profile_date, m.pressure, m.temperature, m.salinity FROM profiles p JOIN measurements m ON p.profile_id = m.profile_id WHERE m.temperature_qc <= 2\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve profile measurement data"
      }
    },
    {
      "id": "join_0383",
      "content": "Join Query: profile data\n            Intent: retrieve profile measurement data\n            Tables: Multiple tables with relationships\n            SQL: SELECT p.profile_id, p.profile_date, m.pressure, m.temperature, m.salinity FROM profiles p JOIN measurements m ON p.profile_id = m.profile_id WHERE m.temperature_qc <= 2\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve profile measurement data"
      }
    },
    {
      "id": "join_0384",
      "content": "Join Query: oceanographic profiles\n            Intent: retrieve profile measurement data\n            Tables: Multiple tables with relationships\n            SQL: SELECT p.profile_id, p.profile_date, m.pressure, m.temperature, m.salinity FROM profiles p JOIN measurements m ON p.profile_id = m.profile_id WHERE m.temperature_qc <= 2\n            Context: Relational query combining data from linked tables\n            Usage: Extract related data across table relationships",
      "metadata": {
        "type": "join_query",
        "category": "relational",
        "complexity": "medium",
        "intent": "retrieve profile measurement data"
      }
    },
    {
      "id": "temp_avg_dynamic_001",
      "content": "Temperature Average Analysis Query\nIntent: Calculate comprehensive temperature statistics across all ARGO profiles\n\nSQL Query: SELECT \n    COUNT(m.temperature) as total_measurements,\n    COUNT(DISTINCT p.profile_id) as profiles_with_temperature,\n    COUNT(DISTINCT p.float_id) as floats_contributing,\n    AVG(m.temperature) as average_temperature_celsius,\n    MIN(m.temperature) as coldest_temperature,\n    MAX(m.temperature) as warmest_temperature,\n    STDDEV(m.temperature) as temperature_std_deviation,\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY m.temperature) as temp_25th_percentile,\n    PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY m.temperature) as temp_median,\n    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY m.temperature) as temp_75th_percentile,\n    AVG(m.pressure) as avg_measurement_depth_dbar,\n    MIN(p.profile_date) as earliest_measurement_date,\n    MAX(p.profile_date) as latest_measurement_date\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.temperature IS NOT NULL \nAND m.temperature_qc = 1\n\nQuery Variations:\n- What is the typical ocean temperature?\n- Show me thermal characteristics of seawater\n- Ocean thermal statistics please\n- How warm is the ocean on average?\n- Tell me about ocean temperature patterns\n- What's the mean ocean thermal state?\n- Ocean temperature overview needed\n- Thermal analysis of ocean water\n- Average ocean thermal conditions\n- Ocean temperature statistical summary\n- CTD temperature measurements analysis\n- ARGO float thermal data statistics\n- Oceanographic temperature dataset summary\n- Seawater thermal properties analysis\n- Marine temperature measurement statistics\n",
      "metadata": {
        "type": "temperature_statistics",
        "category": "global_ocean_analysis",
        "complexity": "medium",
        "analysis_level": "comprehensive_statistics",
        "parameter": "temperature",
        "created_from": "schema_analysis_understanding"
      }
    },
    {
      "id": "temp_depth_dynamic_002",
      "content": "Temperature Depth Distribution Analysis\nIntent: Analyze temperature distribution across different ocean depth zones\n\nSQL Query: SELECT \n    CASE \n        WHEN m.pressure <= 10 THEN 'Surface (0-10 dbar)'\n        WHEN m.pressure <= 50 THEN 'Shallow (10-50 dbar)' \n        WHEN m.pressure <= 200 THEN 'Upper Ocean (50-200 dbar)'\n        WHEN m.pressure <= 500 THEN 'Intermediate (200-500 dbar)'\n        WHEN m.pressure <= 1000 THEN 'Deep (500-1000 dbar)'\n        WHEN m.pressure <= 2000 THEN 'Abyssal (1000-2000 dbar)'\n        ELSE 'Deep Ocean (>2000 dbar)'\n    END as depth_zone,\n    COUNT(m.temperature) as measurements,\n    AVG(m.temperature) as avg_temperature_celsius,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    STDDEV(m.temperature) as temperature_std_dev,\n    AVG(m.pressure) as avg_pressure_dbar,\n    COUNT(DISTINCT p.profile_id) as profiles_contributing\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.temperature IS NOT NULL \nAND m.temperature_qc = 1\nAND m.pressure IS NOT NULL\nGROUP BY depth_zone\nORDER BY AVG(m.pressure)\n\nQuery Variations:\n- Show me temperature distribution at different depths\n- temperature by depth zones\n- temperature depth distribution\n- thermal stratification analysis\n- temperature profile by pressure\n- ocean temperature layers",
      "metadata": {
        "type": "temperature_depth_distribution",
        "category": "vertical_ocean_structure",
        "complexity": "medium",
        "analysis_level": "depth_stratified",
        "parameter": "temperature_vertical",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "temp_max_dynamic_003",
      "content": "Highest Temperature Profile Analysis\nIntent: Identify profiles and locations with highest recorded temperatures\n\nSQL Query: SELECT \n    p.profile_id,\n    p.float_id,\n    f.wmo_number,\n    p.profile_date,\n    p.latitude,\n    p.longitude,\n    m.pressure as measurement_depth_dbar,\n    m.temperature as maximum_temperature,\n    m.salinity,\n    m.temperature_qc,\n    CASE \n        WHEN p.longitude BETWEEN 50 AND 75 AND p.latitude BETWEEN 10 AND 25 THEN 'Arabian Sea'\n        WHEN p.longitude BETWEEN 80 AND 100 AND p.latitude BETWEEN 5 AND 25 THEN 'Bay of Bengal'\n        ELSE 'Indian Ocean'\n    END as ocean_region\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.temperature IS NOT NULL \nAND m.temperature_qc = 1\nORDER BY m.temperature DESC \nLIMIT 10\n\nAnalysis Details:\n- Identifies extreme temperature events and hotspot locations\n- Shows geographic distribution of highest temperatures\n- Includes measurement depth and temporal context\n- Quality controlled data only (temperature_qc = 1)\n\nExpected Results from Indian Ocean:\n- Highest: 31.86\u00c2\u00b0C at surface (0.1 dbar)\n- Hotspot regions: Bay of Bengal dominates extreme temperatures\n- Seasonal timing: May-June heat events\n- Depth pattern: All measurements in surface waters (0-14 dbar)\n\nOceanographic Significance:\n- Heat wave identification and regional hotspot detection\n- Surface warming analysis for climate studies\n- Extreme event characterization for weather correlation\n- Ocean heat content analysis and regional temperature variability\n\nQuery Variations:\n- Which profile recorded the highest temperature?\n- hottest temperature profile\n- maximum temperature measurement\n- warmest water profile\n- peak temperature profile\n- extreme high temperature\n- profile with max temperature\n- highest temp measurement\n- maximum ocean temperature\n- hottest oceanographic reading",
      "metadata": {
        "type": "temperature_extremes",
        "category": "extreme_value_analysis",
        "complexity": "medium",
        "analysis_level": "profile_specific",
        "parameter": "temperature_maximum",
        "data_quality": "highest_qc_only",
        "created_from": "oceanographic_understanding",
        "creation_date": "2025-09-13T00:06:57.249861"
      }
    },
    {
      "id": "temp_cold_dynamic_004",
      "content": "Coldest Temperature Float Analysis\nIntent: Identify ARGO floats recording the lowest ocean temperatures for deep water mass analysis\n\nSQL Query: SELECT \n    f.float_id,\n    f.wmo_number,\n    f.current_status,\n    f.deployment_date,\n    f.deployment_latitude,\n    f.deployment_longitude,\n    COUNT(m.temperature) as temperature_measurements,\n    MIN(m.temperature) as minimum_temperature,\n    AVG(m.temperature) as average_temperature,\n    MAX(m.temperature) as maximum_temperature,\n    STDDEV(m.temperature) as temperature_range_std,\n    COUNT(DISTINCT p.profile_id) as profiles_count,\n    MIN(p.profile_date) as first_profile_date,\n    MAX(p.profile_date) as last_profile_date,\n    AVG(m.pressure) as avg_measurement_depth_dbar\nFROM floats f\nJOIN profiles p ON f.float_id = p.float_id\nJOIN measurements m ON p.profile_id = m.profile_id\nWHERE m.temperature IS NOT NULL\nAND m.temperature_qc = 1\nGROUP BY f.float_id, f.wmo_number, f.current_status, f.deployment_date, \n         f.deployment_latitude, f.deployment_longitude\nORDER BY MIN(m.temperature) ASC\nLIMIT 5\n\nAnalysis Details:\n- Identifies floats accessing coldest deep water masses\n- Float operational history and deployment context included\n- Temperature statistics across entire float operational period\n- Quality controlled measurements only (temperature_qc = 1)\n\nOceanographic Applications:\n- Deep water mass identification and tracking\n- Polar water intrusion detection\n- Cold current analysis and seasonal cooling patterns\n- Ocean ventilation studies and thermohaline circulation\n\nScientific Value:\n- Water mass formation analysis\n- Climate variability assessment through deep water monitoring\n- Antarctic Bottom Water and other cold mass tracking\n- Long-term ocean temperature monitoring\n\nExpected Results:\n- Minimum temperatures around 1.90-2.00\u00c2\u00b0C (deep abyssal waters)\n- Floats with extensive deep diving capabilities (>1500 dbar)\n- Multi-year operational records showing consistent cold water access\n- Geographic patterns of cold water mass distribution\n\nQuery Variations:\n- Which float has the coldest readings?\n- coldest temperature float\n- minimum temperature float\n- float with lowest temps\n- coolest water float\n- arctic temperature float\n- cold water float analysis\n- float minimum temperature\n- lowest temperature float\n- extreme cold float\n- deep cold water float\n- abyssal temperature float\n- cold water mass float\n- minimum temp by float\n- coldest ocean float\n- deep water temperature float\n- float cold temperature analysis\n- lowest temp measurements float\n- cold water monitoring float\n- deep ocean cold float",
      "metadata": {
        "type": "temperature_extremes_float",
        "category": "float_comparison_analysis",
        "complexity": "medium",
        "analysis_level": "float_aggregated",
        "parameter": "temperature_minimum_by_float",
        "data_quality": "highest_qc_only",
        "created_from": "oceanographic_understanding",
        "semantic_richness": "high",
        "creation_date": "2025-09-13T00:10:09.479972"
      }
    },
    {
      "id": "temp_surface_deep_dynamic_005",
      "content": "Surface vs Deep Temperature Comparison Analysis\nIntent: Compare surface (0-50m) and deep water (1000m+) temperatures for thermal stratification analysis\n\nSQL Query: WITH surface_temp AS (\n    SELECT \n        p.profile_id,\n        p.float_id,\n        p.profile_date,\n        p.latitude,\n        p.longitude,\n        AVG(m.temperature) as surface_temperature,\n        COUNT(m.temperature) as surface_measurements,\n        AVG(m.pressure) as avg_surface_pressure\n    FROM profiles p \n    JOIN measurements m ON p.profile_id = m.profile_id\n    WHERE m.pressure <= 50 \n    AND m.temperature IS NOT NULL \n    AND m.temperature_qc = 1\n    GROUP BY p.profile_id, p.float_id, p.profile_date, p.latitude, p.longitude\n),\ndeep_temp AS (\n    SELECT \n        p.profile_id,\n        p.float_id, \n        AVG(m.temperature) as deep_temperature,\n        COUNT(m.temperature) as deep_measurements,\n        AVG(m.pressure) as avg_deep_pressure\n    FROM profiles p \n    JOIN measurements m ON p.profile_id = m.profile_id\n    WHERE m.pressure >= 1000\n    AND m.temperature IS NOT NULL\n    AND m.temperature_qc = 1\n    GROUP BY p.profile_id, p.float_id\n)\nSELECT \n    s.profile_id,\n    s.float_id,\n    f.wmo_number,\n    s.profile_date,\n    s.latitude,\n    s.longitude,\n    s.surface_temperature,\n    d.deep_temperature,\n    (s.surface_temperature - d.deep_temperature) as temperature_difference,\n    s.avg_surface_pressure,\n    d.avg_deep_pressure,\n    s.surface_measurements,\n    d.deep_measurements,\n    CASE \n        WHEN (s.surface_temperature - d.deep_temperature) > 15 THEN 'Very Strong Stratification'\n        WHEN (s.surface_temperature - d.deep_temperature) > 10 THEN 'Strong Stratification'\n        WHEN (s.surface_temperature - d.deep_temperature) > 5 THEN 'Moderate Stratification' \n        WHEN (s.surface_temperature - d.deep_temperature) > 2 THEN 'Weak Stratification'\n        ELSE 'Well Mixed'\n    END as stratification_type\nFROM surface_temp s\nJOIN deep_temp d ON s.profile_id = d.profile_id\nJOIN floats f ON s.float_id = f.float_id\nWHERE s.surface_temperature IS NOT NULL \nAND d.deep_temperature IS NOT NULL\nORDER BY temperature_difference DESC\n\nAnalysis Details:\n- Compares surface waters (0-50 dbar) with deep waters (\u00e2\u2030\u00a51000 dbar)\n- Calculates temperature differences for thermal stratification assessment\n- Classifies stratification strength: Very Strong (>15\u00c2\u00b0C), Strong (10-15\u00c2\u00b0C), Moderate (5-10\u00c2\u00b0C), Weak (2-5\u00c2\u00b0C), Well Mixed (<2\u00c2\u00b0C)\n- Quality controlled measurements only (temperature_qc = 1)\n\nExpected Results from Indian Ocean:\n- Very Strong Stratification: Up to 28\u00c2\u00b0C temperature differences\n- Surface temperatures: ~30\u00c2\u00b0C in tropical regions\n- Deep temperatures: ~2.7\u00c2\u00b0C in abyssal waters\n- Seasonal patterns in stratification strength\n\nOceanographic Significance:\n- Thermal stratification controls ocean mixing and nutrient transport\n- Strong stratification limits vertical exchange between surface and deep waters\n- Climate monitoring through ocean heat content distribution\n- Mixed layer depth assessment and seasonal thermocline analysis\n\nApplications:\n- Ocean dynamics studies and water mass characterization\n- Climate change monitoring through stratification trends\n- Marine ecosystem analysis (nutrient availability)\n- Ocean-atmosphere interaction studies\n\nQuery Variations:\n- Compare surface vs deep water temperatures\n- surface vs deep temperature comparison\n- shallow vs deep water temperature\n- temperature surface deep contrast\n- thermal stratification surface deep\n- surface deep temperature difference\n- upper vs lower ocean temperature\n- temperature vertical comparison\n- surface deep thermal gradient\n- shallow deep temperature analysis\n- ocean temperature stratification\n- vertical temperature structure\n- thermocline temperature analysis\n- surface deep water comparison\n- temperature depth contrast\n- ocean thermal layers comparison\n- surface deep temperature profile\n- vertical temperature gradient\n- thermal stratification analysis\n- ocean temperature vertical structure\n- mixed layer vs deep water temperature\n- surface deep temperature stratification\n- ocean thermal structure analysis\n- temperature profile surface deep\n- vertical ocean temperature difference",
      "metadata": {
        "type": "temperature_stratification",
        "category": "vertical_ocean_analysis",
        "complexity": "high",
        "analysis_level": "profile_comparative",
        "parameter": "temperature_vertical_comparison",
        "data_quality": "highest_qc_only",
        "created_from": "oceanographic_understanding",
        "semantic_richness": "maximum",
        "creation_date": "2025-09-13T00:11:41.537144"
      }
    },
    {
      "id": "salinity_avg_dynamic_006",
      "content": "Salinity Average Analysis Query\nIntent: Calculate comprehensive salinity statistics across all ARGO profiles\n\nSQL Query: SELECT \n    COUNT(m.salinity) as total_salinity_measurements,\n    COUNT(DISTINCT p.profile_id) as profiles_with_salinity,\n    COUNT(DISTINCT p.float_id) as floats_contributing,\n    AVG(m.salinity) as average_salinity_psu,\n    MIN(m.salinity) as lowest_salinity,\n    MAX(m.salinity) as highest_salinity,\n    STDDEV(m.salinity) as salinity_std_deviation,\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY m.salinity) as salinity_25th_percentile,\n    PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY m.salinity) as salinity_median,\n    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY m.salinity) as salinity_75th_percentile,\n    AVG(m.pressure) as avg_measurement_depth_dbar\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.salinity IS NOT NULL \nAND m.salinity_qc = 1\n\nQuery Variations:\n- How salty is the ocean?\n- What's the ocean salinity like?\n- Tell me about ocean salt content\n- Ocean salinity characteristics please\n- Show me seawater salt levels\n- What is typical ocean salinity?\n- Ocean salt concentration analysis\n- How much salt in seawater?\n- Salinity patterns in the ocean\n- Ocean salt statistical overview\n- PSU salinity measurements\n- Haline characteristics analysis\n- CTD salinity data statistics\n- Ocean conductivity analysis\n- Marine salinity dataset summary\n",
      "metadata": {
        "type": "salinity_statistics",
        "category": "global_ocean_analysis",
        "complexity": "medium",
        "analysis_level": "comprehensive_statistics",
        "parameter": "salinity",
        "data_quality": "highest_qc_only",
        "created_from": "oceanographic_understanding",
        "creation_date": "2025-09-13T07:47:21.857531"
      }
    },
    {
      "id": "salinity_depth_dynamic_007",
      "content": "Salinity Depth Distribution Analysis\nIntent: Analyze salinity distribution across different ocean depth zones\n\nSQL Query: SELECT \n    CASE \n        WHEN m.pressure <= 50 THEN 'Surface (0-50 dbar)'\n        WHEN m.pressure <= 200 THEN 'Upper Ocean (50-200 dbar)'\n        WHEN m.pressure <= 500 THEN 'Intermediate (200-500 dbar)'\n        WHEN m.pressure <= 1000 THEN 'Deep (500-1000 dbar)'\n        WHEN m.pressure <= 2000 THEN 'Abyssal (1000-2000 dbar)'\n        ELSE 'Deep Ocean (>2000 dbar)'\n    END as depth_zone,\n    COUNT(m.salinity) as measurements,\n    AVG(m.salinity) as avg_salinity_psu,\n    MIN(m.salinity) as min_salinity,\n    MAX(m.salinity) as max_salinity,\n    STDDEV(m.salinity) as salinity_std_dev,\n    AVG(m.pressure) as avg_pressure_dbar\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.salinity IS NOT NULL \nAND m.salinity_qc = 1\nAND m.pressure IS NOT NULL\nGROUP BY depth_zone\nORDER BY AVG(m.pressure)\n\nQuery Variations:\n- Show me salinity distribution at different depths\n- salinity by depth zones\n- salinity depth distribution\n- halocline analysis\n- salinity profile by pressure\n- depth salinity analysis\n- salinity vs depth distribution\n- salinity stratification analysis\n- salinity depth zones\n- depth-wise salinity stats\n- ocean salinity layers\n- vertical salinity structure\n- halocline structure analysis",
      "metadata": {
        "type": "salinity_depth_distribution",
        "category": "vertical_ocean_structure",
        "complexity": "medium",
        "analysis_level": "depth_stratified",
        "parameter": "salinity_vertical",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "salinity_regional_dynamic_008",
      "content": "Regional Salinity Analysis\nIntent: Identify ocean regions with highest and lowest salinity patterns\n\nSQL Query: SELECT \n    CASE \n        WHEN p.longitude BETWEEN 50 AND 75 AND p.latitude BETWEEN 10 AND 25 THEN 'Arabian Sea'\n        WHEN p.longitude BETWEEN 80 AND 100 AND p.latitude BETWEEN 5 AND 25 THEN 'Bay of Bengal'\n        WHEN p.longitude BETWEEN 60 AND 95 AND p.latitude BETWEEN -10 AND 5 THEN 'Equatorial Indian Ocean'\n        ELSE 'Other Indian Ocean'\n    END as ocean_region,\n    COUNT(m.salinity) as salinity_measurements,\n    AVG(m.salinity) as avg_salinity_psu,\n    MIN(m.salinity) as min_salinity,\n    MAX(m.salinity) as max_salinity,\n    STDDEV(m.salinity) as salinity_std_dev,\n    COUNT(DISTINCT p.profile_id) as profiles_in_region,\n    COUNT(DISTINCT p.float_id) as floats_in_region\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.salinity IS NOT NULL \nAND m.salinity_qc = 1\nGROUP BY ocean_region\nORDER BY avg_salinity_psu DESC\n\nQuery Variations:\n- Which region has the highest salinity?\n- highest salinity region\n- maximum salinity area\n- saltiest ocean region\n- salinity by geographic region\n- regional salinity comparison\n- ocean region salinity analysis\n- geographic salinity distribution\n- salinity hotspot regions\n- regional salt content analysis\n- ocean basin salinity patterns\n- geographic salinity variation\n- regional ocean salinity\n- basin salinity analysis",
      "metadata": {
        "type": "salinity_regional",
        "category": "geographic_analysis",
        "complexity": "medium",
        "analysis_level": "regional_comparative",
        "parameter": "salinity_geographic",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "depth_extreme_dynamic_009",
      "content": "Deepest Measurements Analysis\nIntent: Identify deepest ocean measurements and diving capabilities of ARGO floats\n\nSQL Query: SELECT \n    p.profile_id,\n    p.float_id,\n    f.wmo_number,\n    p.profile_date,\n    p.latitude,\n    p.longitude,\n    m.pressure as maximum_pressure_dbar,\n    m.temperature,\n    m.salinity,\n    m.pressure_qc,\n    CASE \n        WHEN m.pressure > 2000 THEN 'Abyssal Diving (>2000 dbar)'\n        WHEN m.pressure > 1500 THEN 'Deep Diving (1500-2000 dbar)'\n        WHEN m.pressure > 1000 THEN 'Intermediate Diving (1000-1500 dbar)'\n        ELSE 'Shallow Diving (<1000 dbar)'\n    END as diving_capability\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.pressure IS NOT NULL \nAND m.pressure_qc = 1\nORDER BY m.pressure DESC \nLIMIT 10\n\nQuery Variations:\n- How deep do these instruments go?\n- What are the deepest ocean measurements?\n- Show me the deepest diving data\n- How deep can ARGO floats dive?\n- What's the maximum depth reached?\n- Tell me about deep ocean exploration\n- Deepest water column measurements\n- How far down do floats go?\n- Maximum diving capabilities\n- Deep ocean measurement limits\n- Maximum pressure measurements\n- Abyssal zone data collection\n- Deep water profiling limits\n- Bathymetric measurement range\n- Ocean depth profiling capabilities\n",
      "metadata": {
        "type": "depth_extremes",
        "category": "extreme_value_analysis",
        "complexity": "medium",
        "analysis_level": "measurement_specific",
        "parameter": "pressure_maximum",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "ts_relationship_dynamic_010",
      "content": "Temperature-Salinity Relationship Analysis\nIntent: Analyze thermohaline properties and water mass characteristics\n\nSQL Query: SELECT \n    ROUND(m.temperature, 1) as temperature_bin,\n    ROUND(m.salinity, 2) as salinity_bin,\n    COUNT(*) as measurement_count,\n    AVG(m.pressure) as avg_pressure_dbar,\n    COUNT(DISTINCT p.profile_id) as profiles_contributing,\n    CASE \n        WHEN m.temperature > 25 AND m.salinity > 35 THEN 'Warm Saline Water'\n        WHEN m.temperature > 25 AND m.salinity < 35 THEN 'Warm Fresh Water' \n        WHEN m.temperature < 10 AND m.salinity > 34.5 THEN 'Cold Saline Water'\n        WHEN m.temperature < 10 AND m.salinity < 34.5 THEN 'Cold Fresh Water'\n        ELSE 'Intermediate Water Mass'\n    END as water_mass_type\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.temperature IS NOT NULL \nAND m.salinity IS NOT NULL\nAND m.temperature_qc = 1 \nAND m.salinity_qc = 1\nGROUP BY temperature_bin, salinity_bin, water_mass_type\nHAVING COUNT(*) >= 100\nORDER BY measurement_count DESC\nLIMIT 20\n\nQuery Variations:\n- Show temperature-salinity relationship\n- T-S diagram analysis\n- temperature salinity correlation\n- water mass T-S characteristics\n- thermohaline analysis\n- temperature vs salinity\n- T-S scatter analysis\n- ocean water mass identification\n- salinity temperature relationship\n- thermohaline properties\n- T-S relationship analysis\n- water mass classification\n- temperature salinity distribution\n- thermohaline structure\n- ocean T-S properties\n- water mass T-S diagram",
      "metadata": {
        "type": "temperature_salinity_relationship",
        "category": "water_mass_analysis",
        "complexity": "high",
        "analysis_level": "multivariate_analysis",
        "parameter": "temperature_salinity_combined",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "seasonal_temp_dynamic_011",
      "content": "Seasonal Temperature Analysis\nIntent: Analyze temperature variations by season and month for climate monitoring\n\nSQL Query: SELECT \n    EXTRACT(MONTH FROM CAST(p.profile_date AS TIMESTAMP)) as month,\n    CASE \n        WHEN EXTRACT(MONTH FROM CAST(p.profile_date AS TIMESTAMP)) IN (12,1,2) THEN 'Winter'\n        WHEN EXTRACT(MONTH FROM CAST(p.profile_date AS TIMESTAMP)) IN (3,4,5) THEN 'Spring'\n        WHEN EXTRACT(MONTH FROM CAST(p.profile_date AS TIMESTAMP)) IN (6,7,8) THEN 'Summer'\n        ELSE 'Autumn'\n    END as season,\n    COUNT(m.temperature) as measurements,\n    AVG(m.temperature) as avg_temperature,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    STDDEV(m.temperature) as temp_std_dev,\n    COUNT(DISTINCT p.profile_id) as profiles,\n    AVG(m.pressure) as avg_depth\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nWHERE m.temperature IS NOT NULL AND m.temperature_qc = 1\nGROUP BY month, season\nORDER BY month\n\nExpected Results:\n- Winter (Dec-Feb): 9.7-9.9\u00c2\u00b0C average temperatures\n- Spring (Mar-May): 9.8-10.0\u00c2\u00b0C with increasing trend\n- Summer (Jun-Aug): 10.0-10.1\u00c2\u00b0C warmest period\n- Autumn (Sep-Nov): 10.0-10.3\u00c2\u00b0C variable temperatures\n\nQuery Variations:\n- temperature by season\n- seasonal temperature variation\n- monthly temperature analysis\n- temperature seasonal patterns\n- seasonal ocean temperature\n- monthly temperature trends\n- temperature by month\n- seasonal temperature changes\n- climate temperature patterns\n- temperature seasonal cycle\n- ocean temperature seasons\n- monthly ocean temperature\n- seasonal thermal patterns\n- temperature monthly variation",
      "metadata": {
        "type": "seasonal_temperature",
        "category": "temporal_analysis",
        "complexity": "medium",
        "analysis_level": "temporal_comparative",
        "parameter": "temperature_seasonal",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "salinity_anomalies_dynamic_012",
      "content": "Salinity Anomalies Detection\nIntent: Identify unusual salinity measurements for anomaly detection and water mass tracking\n\nSQL Query: WITH salinity_stats AS (\n    SELECT AVG(salinity) as mean_sal, STDDEV(salinity) as std_sal\n    FROM measurements WHERE salinity_qc = 1 AND salinity IS NOT NULL\n)\nSELECT \n    p.profile_id, p.latitude, p.longitude, p.profile_date,\n    m.salinity, m.pressure,\n    (m.salinity - s.mean_sal) / s.std_sal as salinity_anomaly,\n    CASE \n        WHEN ABS((m.salinity - s.mean_sal) / s.std_sal) > 3 THEN 'Extreme Anomaly'\n        WHEN ABS((m.salinity - s.mean_sal) / s.std_sal) > 2 THEN 'Strong Anomaly'\n        ELSE 'Normal'\n    END as anomaly_type\nFROM measurements m\nJOIN profiles p ON m.profile_id = p.profile_id\nCROSS JOIN salinity_stats s\nWHERE m.salinity_qc = 1 AND ABS((m.salinity - s.mean_sal) / s.std_sal) > 2\nORDER BY ABS((m.salinity - s.mean_sal) / s.std_sal) DESC\nLIMIT 20\n\nExpected Results:\n- Extreme freshening events: 28.2 PSU vs 34.9 normal (21\u00cf\u0192 anomaly)\n- Geographic concentration: Bay of Bengal river discharge areas\n- Surface layer anomalies: Monsoon precipitation effects\n- Temporal patterns: Seasonal freshwater input events\n\nQuery Variations:\n- Are there unusual salinity readings?\n- Show me weird salt measurements\n- Any abnormal ocean salinity?\n- Strange salinity patterns detected?\n- Unusual seawater salt content?\n- Odd salinity measurements found?\n- Salinity data quality issues?\n- Abnormal salt concentrations?\n- Salinity measurement outliers?\n- Unexpected salinity values?\n- Haline anomaly detection\n- Statistical salinity outliers\n- Salinity deviation analysis\n- CTD salinity quality control\n- Oceanographic data anomalies\n",
      "metadata": {
        "type": "salinity_anomalies",
        "category": "anomaly_detection",
        "complexity": "high",
        "analysis_level": "statistical_analysis",
        "parameter": "salinity_outliers",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "float_performance_dynamic_013",
      "content": "Float Performance Analysis\nIntent: Analyze ARGO float data quality, operational performance, and measurement reliability\n\nSQL Query: SELECT \n    f.float_id, f.wmo_number, f.current_status,\n    COUNT(DISTINCT p.profile_id) as total_profiles,\n    COUNT(m.measurement_id) as total_measurements,\n    AVG(CASE WHEN m.temperature_qc = 1 THEN 1.0 ELSE 0.0 END) * 100 as temp_quality_percent,\n    AVG(CASE WHEN m.salinity_qc = 1 THEN 1.0 ELSE 0.0 END) * 100 as salinity_quality_percent,\n    MIN(p.profile_date) as first_profile,\n    MAX(p.profile_date) as last_profile,\n    MAX(m.pressure) as max_diving_depth,\n    AVG(m.pressure) as avg_operating_depth\nFROM floats f\nJOIN profiles p ON f.float_id = p.float_id\nJOIN measurements m ON p.profile_id = m.profile_id\nGROUP BY f.float_id, f.wmo_number, f.current_status\nORDER BY total_measurements DESC\n\nExpected Results:\n- Top performer: Float 2902194 with 212K measurements\n- Data quality: 100% temperature and salinity quality across all floats\n- Operational range: 2-8 years active deployment periods\n- Diving capability: Maximum depths 2000-2026 dbar\n\nQuery Variations:\n- float performance analysis\n- ARGO float data quality\n- float measurement statistics\n- instrument performance\n- float reliability analysis\n- best performing floats\n- float operational statistics\n- ARGO float comparison\n- instrument data quality\n- float measurement quality\n- ARGO float efficiency\n- float data reliability\n- instrument performance metrics\n- float operational analysis",
      "metadata": {
        "type": "float_performance",
        "category": "instrument_analysis",
        "complexity": "medium",
        "analysis_level": "instrument_comparative",
        "parameter": "float_statistics",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "mixed_layer_depth_dynamic_014",
      "content": "Mixed Layer Depth Analysis\nIntent: Calculate mixed layer depth using temperature gradient method for upper ocean structure analysis\n\nSQL Query: WITH surface_temp AS (\n    SELECT profile_id, AVG(temperature) as surface_temp, COUNT(*) as surface_measurements\n    FROM measurements m\n    WHERE pressure <= 10 AND temperature_qc = 1 AND temperature IS NOT NULL\n    GROUP BY profile_id HAVING COUNT(*) >= 3\n),\ntemp_gradient AS (\n    SELECT m.profile_id, m.pressure, m.temperature, s.surface_temp,\n        ABS(m.temperature - s.surface_temp) as temp_diff,\n        ROW_NUMBER() OVER (PARTITION BY m.profile_id ORDER BY m.pressure) as depth_rank\n    FROM measurements m\n    JOIN surface_temp s ON m.profile_id = s.profile_id\n    WHERE m.temperature_qc = 1 AND m.pressure > 10 AND m.pressure <= 500\n),\nmixed_layer AS (\n    SELECT profile_id, MIN(pressure) as mixed_layer_depth, MIN(temperature) as mld_temperature, surface_temp\n    FROM temp_gradient WHERE temp_diff > 0.5 GROUP BY profile_id, surface_temp\n)\nSELECT p.profile_id, p.float_id, f.wmo_number, p.latitude, p.longitude, p.profile_date,\n    COALESCE(ml.mixed_layer_depth, 200.0) as estimated_mld_dbar,\n    ml.surface_temp, ml.mld_temperature,\n    CASE \n        WHEN COALESCE(ml.mixed_layer_depth, 200.0) < 30 THEN 'Very Shallow MLD'\n        WHEN COALESCE(ml.mixed_layer_depth, 200.0) < 60 THEN 'Shallow MLD'\n        WHEN COALESCE(ml.mixed_layer_depth, 200.0) < 100 THEN 'Moderate MLD'\n        WHEN COALESCE(ml.mixed_layer_depth, 200.0) < 150 THEN 'Deep MLD'\n        ELSE 'Very Deep MLD'\n    END as mld_category\nFROM profiles p\nJOIN floats f ON p.float_id = f.float_id\nLEFT JOIN mixed_layer ml ON p.profile_id = ml.profile_id\nWHERE p.profile_id IN (SELECT profile_id FROM surface_temp)\nORDER BY estimated_mld_dbar DESC\nLIMIT 20\n\nExpected Results:\n- Very deep MLDs: 200-365 dbar in subtropical regions during winter\n- Surface temperatures: 17-19\u00c2\u00b0C during deep mixing events\n- Geographic patterns: Deeper MLDs at higher latitudes\n- Seasonal timing: Winter mixing periods (Jan-Mar)\n\nQuery Variations:\n- mixed layer depth analysis\n- MLD calculation\n- surface mixing depth\n- thermocline depth\n- upper ocean structure\n- mixed layer analysis\n- ocean surface mixing\n- MLD estimation\n- surface layer depth\n- ocean mixing analysis\n- thermocline structure\n- upper ocean mixing\n- surface ocean stratification\n- mixed layer properties",
      "metadata": {
        "type": "mixed_layer_depth",
        "category": "upper_ocean_structure",
        "complexity": "high",
        "analysis_level": "complex_calculation",
        "parameter": "mixed_layer_depth",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "water_mass_classification_dynamic_015",
      "content": "Water Mass Classification Analysis\nIntent: Classify ocean water masses based on temperature-salinity characteristics for water mass identification\n\nSQL Query: WITH ts_analysis AS (\n    SELECT m.temperature, m.salinity, m.pressure, p.latitude, p.longitude,\n        CASE \n            WHEN m.temperature > 28 AND m.salinity BETWEEN 33 AND 35.5 THEN 'Tropical Surface Water'\n            WHEN m.temperature BETWEEN 25 AND 28 AND m.salinity BETWEEN 34.5 AND 36 THEN 'Warm Subtropical Surface'\n            WHEN m.temperature BETWEEN 20 AND 25 AND m.salinity BETWEEN 35 AND 36.2 THEN 'Subtropical Underwater'\n            WHEN m.temperature BETWEEN 15 AND 20 AND m.salinity BETWEEN 35.2 AND 35.8 THEN 'Central Water'\n            WHEN m.temperature BETWEEN 10 AND 15 AND m.salinity BETWEEN 34.8 AND 35.3 THEN 'Intermediate Water'\n            WHEN m.temperature BETWEEN 8 AND 12 AND m.salinity BETWEEN 34.6 AND 34.9 THEN 'Upper Deep Water'\n            WHEN m.temperature BETWEEN 4 AND 8 AND m.salinity BETWEEN 34.65 AND 34.85 THEN 'Middle Deep Water'\n            WHEN m.temperature BETWEEN 2 AND 4 AND m.salinity BETWEEN 34.7 AND 34.8 THEN 'Lower Deep Water'\n            WHEN m.temperature < 3 AND m.salinity > 34.7 THEN 'Bottom Water'\n            WHEN m.temperature > 25 AND m.salinity < 33 THEN 'Fresh Surface Water'\n            ELSE 'Transitional Water Mass'\n        END as water_mass_type,\n        CASE \n            WHEN m.pressure <= 100 THEN 'Surface Layer'\n            WHEN m.pressure <= 500 THEN 'Upper Ocean'\n            WHEN m.pressure <= 1000 THEN 'Intermediate Layer'\n            ELSE 'Deep Layer'\n        END as depth_layer\n    FROM measurements m\n    JOIN profiles p ON m.profile_id = p.profile_id\n    WHERE m.temperature_qc = 1 AND m.salinity_qc = 1\n)\nSELECT water_mass_type, depth_layer, COUNT(*) as measurement_count,\n    AVG(temperature) as avg_temperature, AVG(salinity) as avg_salinity,\n    AVG(pressure) as avg_depth, STDDEV(temperature) as temp_std, STDDEV(salinity) as sal_std,\n    CASE \n        WHEN COUNT(*) > 50000 THEN 'Dominant Water Mass'\n        WHEN COUNT(*) > 10000 THEN 'Major Water Mass'\n        WHEN COUNT(*) > 5000 THEN 'Significant Water Mass'\n        ELSE 'Minor Water Mass'\n    END as water_mass_importance\nFROM ts_analysis\nGROUP BY water_mass_type, depth_layer\nHAVING COUNT(*) >= 1000\nORDER BY measurement_count DESC\nLIMIT 20\n\nExpected Results:\n- Dominant: Lower Deep Water (3\u00c2\u00b0C, 34.8 PSU) at 1875 dbar\n- Major: Tropical Surface Water (29\u00c2\u00b0C, 34.3 PSU) at 34 dbar\n- Fresh Surface Water: 28\u00c2\u00b0C, 32.4 PSU from river discharge\n- Geographic patterns: Water mass distribution across Indian Ocean\n\nQuery Variations:\n- What types of water are there?\n- Different ocean water characteristics?\n- Water mass identification analysis\n- Ocean water classification system\n- Types of seawater properties\n- Water mass property analysis\n- Ocean water type identification\n- Different water mass characteristics\n- Seawater classification analysis\n- Ocean water mass properties\n- T-S diagram analysis\n- Thermohaline classification\n- Water mass T-S properties\n- Oceanographic water typing\n- Hydrographic water mass analysis\n",
      "metadata": {
        "type": "water_mass_classification",
        "category": "water_mass_analysis",
        "complexity": "high",
        "analysis_level": "multivariate_classification",
        "parameter": "water_mass_types",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "geographic_distribution_dynamic_016",
      "content": "Geographic Distribution Analysis\nIntent: Analyze the spatial distribution of ARGO float measurements across latitude and longitude\n\nSQL Query: SELECT \n    CASE \n        WHEN p.latitude >= 30 THEN 'Northern Subtropical (\u00e2\u2030\u00a530\u00c2\u00b0N)'\n        WHEN p.latitude >= 10 THEN 'Northern Tropical (10-30\u00c2\u00b0N)'\n        WHEN p.latitude >= -10 THEN 'Equatorial (-10 to 10\u00c2\u00b0N)'\n        WHEN p.latitude >= -30 THEN 'Southern Tropical (-30 to -10\u00c2\u00b0S)'\n        ELSE 'Southern Subtropical (<-30\u00c2\u00b0S)'\n    END as latitude_zone,\n    CASE \n        WHEN p.longitude BETWEEN 40 AND 60 THEN 'Western Arabian Sea (40-60\u00c2\u00b0E)'\n        WHEN p.longitude BETWEEN 60 AND 80 THEN 'Central Indian Ocean (60-80\u00c2\u00b0E)'\n        WHEN p.longitude BETWEEN 80 AND 100 THEN 'Bay of Bengal (80-100\u00c2\u00b0E)'\n        WHEN p.longitude BETWEEN 100 AND 120 THEN 'Southeast Indian (100-120\u00c2\u00b0E)'\n        ELSE 'Eastern Indian Ocean (>120\u00c2\u00b0E)'\n    END as longitude_zone,\n    COUNT(DISTINCT p.profile_id) as total_profiles,\n    COUNT(m.measurement_id) as total_measurements,\n    COUNT(DISTINCT p.float_id) as active_floats,\n    AVG(p.latitude) as avg_latitude,\n    AVG(p.longitude) as avg_longitude,\n    MIN(p.profile_date) as first_measurement,\n    MAX(p.profile_date) as latest_measurement\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nGROUP BY latitude_zone, longitude_zone\nORDER BY total_measurements DESC\n\nExpected Results:\n- Bay of Bengal: Highest measurement density due to monsoon freshwater inputs\n- Arabian Sea: High activity near upwelling zones\n- Southern Indian Ocean: Fewer measurements in remote areas\n- Equatorial region: Consistent coverage across longitude bands\n\nQuery Variations:\n- where is ARGO data collected\n- geographic coverage of measurements\n- latitude longitude distribution\n- spatial data distribution\n- where are the floats located\n- global measurement coverage\n- geographic data density\n- location of ocean measurements\n- spatial coverage analysis\n- where do we have data\n- measurement geographic spread\n- float location distribution\n- spatial data availability\n- geographic measurement patterns\n- regional data coverage\n- ocean measurement locations\n- global float distribution\n- geographic data analysis\n- spatial measurement coverage\n- location-based data summary",
      "metadata": {
        "type": "geographic_distribution",
        "category": "spatial_analysis",
        "complexity": "medium",
        "analysis_level": "geographic_binning",
        "parameter": "spatial_coverage",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "ocean_basin_comparison_dynamic_017",
      "content": "Ocean Basin Comparison Analysis\nIntent: Compare oceanographic properties between major Indian Ocean regions\n\nSQL Query: SELECT \n    CASE \n        WHEN p.longitude BETWEEN 40 AND 70 AND p.latitude BETWEEN 10 AND 25 THEN 'Arabian Sea'\n        WHEN p.longitude BETWEEN 80 AND 95 AND p.latitude BETWEEN 5 AND 25 THEN 'Bay of Bengal'\n        WHEN p.longitude BETWEEN 70 AND 100 AND p.latitude BETWEEN -10 AND 10 THEN 'Equatorial Indian Ocean'\n        WHEN p.longitude BETWEEN 90 AND 120 AND p.latitude BETWEEN -30 AND 0 THEN 'Southeast Indian Ocean'\n        WHEN p.latitude < -15 AND p.longitude BETWEEN 40 AND 80 THEN 'Southwest Indian Ocean'\n        ELSE 'Central Indian Ocean'\n    END as ocean_basin,\n    COUNT(DISTINCT p.profile_id) as profiles,\n    AVG(m.temperature) as avg_temperature_celsius,\n    AVG(m.salinity) as avg_salinity_psu,\n    AVG(m.pressure) as avg_measurement_depth,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    MIN(m.salinity) as min_salinity,\n    MAX(m.salinity) as max_salinity,\n    STDDEV(m.temperature) as temp_variability,\n    STDDEV(m.salinity) as salinity_variability,\n    COUNT(DISTINCT p.float_id) as contributing_floats\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nWHERE m.temperature_qc = 1 AND m.salinity_qc = 1\nGROUP BY ocean_basin\nORDER BY profiles DESC\n\nExpected Results:\n- Arabian Sea: Highest salinity due to evaporation, warm temperatures\n- Bay of Bengal: Lower salinity due to river discharge, seasonal variations\n- Equatorial region: Consistently warm temperatures, stable salinity\n- Southern basins: Cooler temperatures, higher salinity at depth\n\nQuery Variations:\n- compare ocean basins\n- regional ocean differences\n- basin comparison analysis\n- ocean region properties\n- compare different sea areas\n- regional oceanographic comparison\n- basin temperature differences\n- ocean area analysis\n- regional water properties\n- compare Arabian Sea Bay of Bengal\n- ocean basin characteristics\n- regional ocean analysis\n- basin property comparison\n- ocean region statistics\n- comparative basin analysis\n- regional oceanographic patterns\n- ocean basin temperature salinity\n- comparative regional analysis\n- basin water mass differences\n- regional ocean variations",
      "metadata": {
        "type": "ocean_basin_comparison",
        "category": "comparative_regional_analysis",
        "complexity": "high",
        "analysis_level": "multi_regional_comparison",
        "parameter": "basin_properties",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "latitude_temperature_gradient_dynamic_018",
      "content": "Latitude-based Temperature Gradient Analysis\nIntent: Analyze temperature variation with latitude to understand thermal gradients across the Indian Ocean\n\nSQL Query: SELECT \n    CASE \n        WHEN p.latitude >= 30 THEN '30\u00c2\u00b0N and above'\n        WHEN p.latitude >= 20 THEN '20-30\u00c2\u00b0N'\n        WHEN p.latitude >= 10 THEN '10-20\u00c2\u00b0N'\n        WHEN p.latitude >= 0 THEN '0-10\u00c2\u00b0N'\n        WHEN p.latitude >= -10 THEN '0-10\u00c2\u00b0S'\n        WHEN p.latitude >= -20 THEN '10-20\u00c2\u00b0S'\n        ELSE '20\u00c2\u00b0S and below'\n    END as latitude_band,\n    COUNT(m.temperature) as temperature_measurements,\n    AVG(m.temperature) as avg_temperature_celsius,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    STDDEV(m.temperature) as temperature_std_dev,\n    AVG(p.latitude) as band_center_latitude,\n    COUNT(DISTINCT p.profile_id) as profiles_in_band,\n    AVG(m.pressure) as avg_measurement_depth\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nWHERE m.temperature IS NOT NULL AND m.temperature_qc = 1\nGROUP BY latitude_band\nORDER BY band_center_latitude DESC\n\nExpected Results:\n- Northern latitudes (>20\u00c2\u00b0N): Warmest surface waters due to Arabian Sea heating\n- Equatorial band (\u00c2\u00b110\u00c2\u00b0): Consistently warm but variable due to upwelling\n- Southern latitudes (<-10\u00c2\u00b0S): Cooler temperatures, more seasonal variation\n- Clear thermal gradient from north to south across the Indian Ocean\n\nQuery Variations:\n- temperature by latitude\n- thermal gradient analysis\n- temperature latitude relationship\n- equatorial vs polar temperatures\n- latitudinal temperature variation\n- north south temperature differences\n- temperature gradient with latitude\n- thermal patterns by latitude\n- latitude temperature distribution\n- meridional temperature gradient\n- temperature versus latitude\n- latitudinal thermal analysis\n- north south thermal gradient\n- temperature change with latitude\n- geographic temperature patterns\n- thermal distribution by latitude\n- latitude dependent temperature\n- meridional thermal structure\n- temperature latitude correlation\n- latitudinal ocean temperature",
      "metadata": {
        "type": "latitude_temperature_gradient",
        "category": "meridional_analysis",
        "complexity": "medium",
        "analysis_level": "latitudinal_binning",
        "parameter": "temperature_latitude",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "coastal_open_ocean_dynamic_019",
      "content": "Coastal vs Open Ocean Analysis\nIntent: Compare nearshore coastal waters with open ocean measurements\n\nSQL Query: SELECT \n    CASE \n        WHEN (p.longitude BETWEEN 50 AND 75 AND p.latitude BETWEEN 15 AND 25) \n          OR (p.longitude BETWEEN 80 AND 90 AND p.latitude BETWEEN 8 AND 22) THEN 'Coastal Waters'\n        WHEN p.longitude BETWEEN 60 AND 90 AND p.latitude BETWEEN -5 AND 15 THEN 'Semi-Coastal'\n        ELSE 'Open Ocean'\n    END as water_type,\n    COUNT(DISTINCT p.profile_id) as total_profiles,\n    COUNT(m.measurement_id) as total_measurements,\n    AVG(m.temperature) as avg_temperature_celsius,\n    AVG(m.salinity) as avg_salinity_psu,\n    MIN(m.salinity) as min_salinity,\n    MAX(m.salinity) as max_salinity,\n    STDDEV(m.salinity) as salinity_variability,\n    STDDEV(m.temperature) as temperature_variability,\n    AVG(m.pressure) as avg_depth_sampled,\n    COUNT(DISTINCT p.float_id) as floats_operating\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nWHERE m.temperature_qc = 1 AND m.salinity_qc = 1\nGROUP BY water_type\nORDER BY total_profiles DESC\n\nExpected Results:\n- Coastal waters: Lower salinity due to river discharge, higher variability\n- Semi-coastal: Intermediate properties, seasonal freshwater influence\n- Open ocean: Stable salinity, less variability, deeper measurements\n- Bay of Bengal coastal: Significant freshening from Ganges/Brahmaputra\n\nQuery Variations:\n- coastal vs open ocean\n- nearshore vs offshore analysis\n- shelf waters comparison\n- coastal water properties\n- nearshore ocean measurements\n- offshore vs onshore data\n- coastal ocean analysis\n- continental shelf waters\n- nearshore water characteristics\n- coastal vs pelagic waters\n- shallow vs deep water analysis\n- inshore vs offshore comparison\n- coastal ocean properties\n- nearshore vs deep ocean\n- shelf break analysis\n- coastal water salinity\n- nearshore freshwater influence\n- coastal vs oceanic waters\n- shallow water vs deep ocean\n- coastal measurement analysis",
      "metadata": {
        "type": "coastal_open_ocean",
        "category": "coastal_oceanic_comparison",
        "complexity": "high",
        "analysis_level": "distance_based_classification",
        "parameter": "coastal_oceanic_properties",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "data_density_hotspots_dynamic_020",
      "content": "Data Density Hotspots Analysis\nIntent: Identify geographic areas with highest ARGO measurement density and data concentration\n\nSQL Query: SELECT \n    ROUND(p.latitude, 1) as lat_grid,\n    ROUND(p.longitude, 1) as lon_grid,\n    COUNT(DISTINCT p.profile_id) as profiles_in_grid,\n    COUNT(m.measurement_id) as total_measurements,\n    COUNT(DISTINCT p.float_id) as unique_floats,\n    AVG(m.temperature) as avg_temperature,\n    AVG(m.salinity) as avg_salinity,\n    MIN(p.profile_date) as first_measurement_date,\n    MAX(p.profile_date) as latest_measurement_date,\n    CASE \n        WHEN COUNT(m.measurement_id) > 50000 THEN 'Very High Density'\n        WHEN COUNT(m.measurement_id) > 20000 THEN 'High Density'\n        WHEN COUNT(m.measurement_id) > 10000 THEN 'Medium Density'\n        WHEN COUNT(m.measurement_id) > 5000 THEN 'Low Density'\n        ELSE 'Sparse Coverage'\n    END as density_category,\n    ROUND(AVG(p.latitude), 2) as center_latitude,\n    ROUND(AVG(p.longitude), 2) as center_longitude\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nGROUP BY lat_grid, lon_grid\nHAVING COUNT(m.measurement_id) >= 5000\nORDER BY total_measurements DESC\nLIMIT 20\n\nExpected Results:\n- Bay of Bengal hotspot: High density due to monsoon research focus\n- Arabian Sea upwelling zones: Concentrated measurements\n- Equatorial Indian Ocean: Consistent but moderate density\n- Southern Ocean frontal zones: Targeted sampling areas\n\nQuery Variations:\n- where is most data collected\n- measurement density hotspots\n- data concentration areas\n- highest data density regions\n- where most measurements taken\n- data collection hotspots\n- measurement concentration zones\n- high density data areas\n- most sampled locations\n- data clustering analysis\n- measurement frequency by location\n- geographic data intensity\n- high activity measurement zones\n- data density distribution\n- measurement hotspot analysis\n- concentrated sampling areas\n- peak data collection regions\n- maximum measurement density\n- data rich geographic areas\n- intensive sampling locations",
      "metadata": {
        "type": "data_density_hotspots",
        "category": "data_coverage_analysis",
        "complexity": "medium",
        "analysis_level": "spatial_density_analysis",
        "parameter": "measurement_density",
        "created_from": "oceanographic_understanding"
      }
    },
    {
      "id": "individual_profile_temperature_analysis_001",
      "content": "Individual Profile Temperature Analysis\nIntent: Calculate temperature statistics for each individual ARGO profile separately\n\nSQL Query: SELECT \n    p.profile_id,\n    p.float_id,\n    f.wmo_number,\n    p.profile_date,\n    p.latitude,\n    p.longitude,\n    COUNT(m.temperature) as temperature_measurements,\n    AVG(m.temperature) as average_temperature_celsius,\n    MIN(m.temperature) as minimum_temperature,\n    MAX(m.temperature) as maximum_temperature,\n    STDDEV(m.temperature) as temperature_std_deviation,\n    AVG(m.pressure) as average_depth_dbar\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.temperature IS NOT NULL \nAND m.temperature_qc = 1\nGROUP BY p.profile_id, p.float_id, f.wmo_number, p.profile_date, p.latitude, p.longitude\nORDER BY p.profile_id\n\nAnalysis Details:\n- Provides individual temperature statistics for each profile separately\n- Groups measurements by profile_id to get per-profile averages\n- Includes geographic context (lat/lon) for each profile\n- Quality controlled measurements only (temperature_qc = 1)\n- Shows measurement count and depth information per profile\n\nExpected Results:\n- 3,130 individual profile records (one per profile)\n- Profile-specific temperature averages ranging from ~2-30\u00c2\u00b0C\n- Individual profile temperature ranges and variability\n- Geographic distribution of individual profile characteristics\n\nQuery Variations:\n- temperature average for each profile\n- give me temperature average for each profile\n- temperature per profile\n- individual profile temperature\n- each profile temperature average\n- profile-specific temperature analysis\n- temperature statistics by profile\n- per-profile temperature analysis\n- individual profile temperature statistics\n- temperature data for each profile\n- profile by profile temperature\n- each individual profile temperature\n- temperature average per profile\n- profile-level temperature analysis\n- individual profile thermal analysis\n- temperature for individual profiles\n- per profile temperature statistics\n- each profile thermal data\n- profile-specific temperature stats\n- individual profile temperature data",
      "metadata": {
        "category": "individual_profile_analysis",
        "intent": "individual_statistics",
        "grouping_level": "profile",
        "parameter": "temperature",
        "analysis_type": "statistical_summary",
        "complexity": "basic",
        "created_from": "precision_improvement_fix"
      }
    },
    {
      "id": "individual_profile_salinity_analysis_002",
      "content": "Individual Profile Salinity Analysis\nIntent: Calculate salinity statistics for each individual ARGO profile separately\n\nSQL Query: SELECT \n    p.profile_id,\n    p.float_id,\n    f.wmo_number,\n    p.profile_date,\n    p.latitude,\n    p.longitude,\n    COUNT(m.salinity) as salinity_measurements,\n    AVG(m.salinity) as average_salinity_psu,\n    MIN(m.salinity) as minimum_salinity,\n    MAX(m.salinity) as maximum_salinity,\n    STDDEV(m.salinity) as salinity_std_deviation,\n    AVG(m.pressure) as average_depth_dbar\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.salinity IS NOT NULL \nAND m.salinity_qc = 1\nGROUP BY p.profile_id, p.float_id, f.wmo_number, p.profile_date, p.latitude, p.longitude\nORDER BY p.profile_id\n\nAnalysis Details:\n- Provides individual salinity statistics for each profile separately\n- Groups measurements by profile_id to get per-profile averages\n- Includes geographic context (lat/lon) for each profile\n- Quality controlled measurements only (salinity_qc = 1)\n- Shows measurement count and depth information per profile\n\nExpected Results:\n- 3,130 individual profile records (one per profile)\n- Profile-specific salinity averages ranging from ~32-36 PSU\n- Individual profile salinity ranges and variability\n- Geographic distribution of individual profile characteristics\n\nQuery Variations:\n- salinity average for each profile\n- give me salinity average for each profile\n- salinity per profile\n- individual profile salinity\n- each profile salinity average\n- profile-specific salinity analysis\n- salinity statistics by profile\n- per-profile salinity analysis\n- individual profile salinity statistics\n- salinity data for each profile\n- profile by profile salinity\n- each individual profile salinity\n- salinity average per profile\n- profile-level salinity analysis\n- individual profile salinity data\n- per profile salinity statistics\n- each profile salinity data\n- profile-specific salinity stats\n- individual profile salt analysis",
      "metadata": {
        "category": "individual_profile_analysis",
        "intent": "individual_statistics",
        "grouping_level": "profile",
        "parameter": "salinity",
        "analysis_type": "statistical_summary",
        "complexity": "basic",
        "created_from": "precision_improvement_fix"
      }
    },
    {
      "id": "individual_profile_comprehensive_analysis_003",
      "content": "Individual Profile Comprehensive Analysis\nIntent: Calculate comprehensive statistics for each individual ARGO profile (temperature, salinity, depth)\n\nSQL Query: SELECT \n    p.profile_id,\n    p.float_id,\n    f.wmo_number,\n    p.profile_date,\n    p.latitude,\n    p.longitude,\n    COUNT(m.measurement_id) as total_measurements,\n    COUNT(m.temperature) as temperature_measurements,\n    COUNT(m.salinity) as salinity_measurements,\n    AVG(m.temperature) as avg_temperature_celsius,\n    AVG(m.salinity) as avg_salinity_psu,\n    AVG(m.pressure) as avg_pressure_dbar,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    MIN(m.salinity) as min_salinity,\n    MAX(m.salinity) as max_salinity,\n    MIN(m.pressure) as min_depth_dbar,\n    MAX(m.pressure) as max_depth_dbar,\n    STDDEV(m.temperature) as temp_std_dev,\n    STDDEV(m.salinity) as sal_std_dev\nFROM profiles p\nJOIN measurements m ON p.profile_id = m.profile_id\nJOIN floats f ON p.float_id = f.float_id\nWHERE m.temperature_qc = 1 AND m.salinity_qc = 1\nGROUP BY p.profile_id, p.float_id, f.wmo_number, p.profile_date, p.latitude, p.longitude\nORDER BY p.profile_id\n\nAnalysis Details:\n- Comprehensive individual statistics for each profile separately\n- Combines temperature, salinity, and depth data per profile\n- Groups measurements by profile_id for individual profile analysis\n- Quality controlled measurements only\n- Complete profile characterization\n\nExpected Results:\n- 3,130 individual profile records with complete statistics\n- Each profile's full oceanographic signature\n- Individual profile ranges and variability for all parameters\n- Complete individual profile characterization\n\nQuery Variations:\n- comprehensive stats for each profile\n- complete analysis for each profile\n- full statistics per profile\n- individual profile complete analysis\n- each profile comprehensive data\n- profile-specific complete statistics\n- individual profile full analysis\n- comprehensive data per profile\n- complete profile statistics individually\n- each profile full oceanographic analysis\n- individual comprehensive profile stats\n- profile by profile complete analysis\n- each individual profile statistics\n- comprehensive individual profile data\n- full analysis for each profile\n- complete statistics by profile\n- individual profile oceanographic analysis\n- per profile comprehensive statistics\n- each profile complete oceanographic data\n- profile-level comprehensive analysis",
      "metadata": {
        "category": "individual_profile_analysis",
        "intent": "individual_comprehensive",
        "grouping_level": "profile",
        "parameter": "all_parameters",
        "analysis_type": "comprehensive_summary",
        "complexity": "intermediate",
        "created_from": "precision_improvement_fix"
      }
    },
    {
      "id": "temp_depth_distribution",
      "content": "Enhanced Analytical Query: temp_depth_distribution\nIntent: statistical_geographic analysis with high complexity\nContext: depth_zones, temperature_distribution, thermocline analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: statistical_geographic\nComplexity Level: high\n\nSQL Query:\nSELECT\n    CASE\n    WHEN m.pressure < 100 THEN 'Surface (0-100m)'\n    WHEN m.pressure < 500 THEN 'Intermediate (100-500m)'\n    WHEN m.pressure < 1000 THEN 'Deep (500-1000m)'\n    ELSE 'Abyssal (>1000m)'\n    END as depth_zone,\n    COUNT(*) as measurement_count,\n    AVG(m.temperature) as avg_temperature,\n    MIN(m.temperature) as min_temperature,\n    MAX(m.temperature) as max_temperature,\n    STDDEV(m.temperature) as temp_std_dev\n    FROM measurements m\n    JOIN profiles p ON m.profile_id = p.profile_id\n    WHERE m.temperature IS NOT NULL AND m.pressure IS NOT NULL\n    GROUP BY depth_zone\n    ORDER BY AVG(m.pressure)\n\nQuery Variations:\n- show me temperature distribution at different depths\n- temperature by depth zones\n- how does temperature vary with depth\n- thermal stratification analysis\n- thermocline temperature patterns\n\nUsage: This enhanced analytical query provides statistical_geographic capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "high",
        "analytical_type": "statistical_geographic",
        "domain": "physical_oceanography",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "depth_zones, temperature_distribution, thermocline",
        "parameter_requirements": "temperature:required, pressure:required"
      }
    },
    {
      "id": "profile_level_statistics",
      "content": "Enhanced Analytical Query: profile_level_statistics\nIntent: profile_aggregation analysis with medium complexity\nContext: profile_analysis, individual_profiles, per_profile_stats analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: profile_aggregation\nComplexity Level: medium\n\nSQL Query:\nSELECT\n    p.profile_id,\n    p.profile_date,\n    f.float_id,\n    f.deployment_latitude,\n    f.deployment_longitude,\n    COUNT(m.measurement_id) as total_measurements,\n    AVG(m.{parameter}) as avg_{parameter},\n    MIN(m.{parameter}) as min_{parameter},\n    MAX(m.{parameter}) as max_{parameter},\n    MAX(m.pressure) as max_depth\n    FROM profiles p\n    JOIN measurements m ON p.profile_id = m.profile_id\n    JOIN floats f ON p.float_id = f.float_id\n    WHERE m.{parameter} IS NOT NULL\n    GROUP BY p.profile_id, p.profile_date, f.float_id, f.deployment_latitude, f.deployment_longitude\n    ORDER BY p.profile_date\n\nQuery Variations:\n- temperature statistics for each profile\n- show me temperature data for each profile\n- per profile temperature analysis\n- individual profile statistics\n- profile by profile temperature data\n\nUsage: This enhanced analytical query provides profile_aggregation capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "medium",
        "analytical_type": "profile_aggregation",
        "domain": "physical_oceanography",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "profile_analysis, individual_profiles, per_profile_stats",
        "parameter_requirements": "parameter:temperature|salinity|pressure"
      }
    },
    {
      "id": "temporal_trends",
      "content": "Enhanced Analytical Query: temporal_trends\nIntent: temporal_analysis analysis with high complexity\nContext: time_series, temporal_patterns, seasonal_variations analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: temporal_analysis\nComplexity Level: high\n\nSQL Query:\nSELECT\n    EXTRACT(year FROM p.profile_date) as year,\n    EXTRACT(month FROM p.profile_date) as month,\n    COUNT(DISTINCT p.profile_id) as profile_count,\n    COUNT(m.measurement_id) as measurement_count,\n    AVG(m.{parameter}) as avg_{parameter},\n    STDDEV(m.{parameter}) as {parameter}_variability\n    FROM profiles p\n    JOIN measurements m ON p.profile_id = m.profile_id\n    WHERE m.{parameter} IS NOT NULL\n    AND p.profile_date IS NOT NULL\n    GROUP BY EXTRACT(year FROM p.profile_date), EXTRACT(month FROM p.profile_date)\n    ORDER BY year, month\n\nQuery Variations:\n- temperature trends over time\n- seasonal temperature patterns\n- how has temperature changed over the years\n- temporal temperature analysis\n- monthly temperature variations\n\nUsage: This enhanced analytical query provides temporal_analysis capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "high",
        "analytical_type": "temporal_analysis",
        "domain": "temporal_oceanography",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "time_series, temporal_patterns, seasonal_variations",
        "parameter_requirements": "parameter:temperature|salinity, date:required"
      }
    },
    {
      "id": "geographic_comparison",
      "content": "Enhanced Analytical Query: geographic_comparison\nIntent: geographic_comparative analysis with high complexity\nContext: geographic_regions, spatial_analysis, regional_comparison analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: geographic_comparative\nComplexity Level: high\n\nSQL Query:\nSELECT\n    CASE\n    WHEN f.deployment_latitude > 30 THEN 'Northern'\n    WHEN f.deployment_latitude > 0 THEN 'Tropical'\n    WHEN f.deployment_latitude > -30 THEN 'Southern_Tropical'\n    ELSE 'Antarctic'\n    END as latitude_zone,\n    CASE\n    WHEN f.deployment_longitude > 0 THEN 'Eastern'\n    ELSE 'Western'\n    END as longitude_zone,\n    COUNT(DISTINCT f.float_id) as float_count,\n    COUNT(DISTINCT p.profile_id) as profile_count,\n    AVG(m.{parameter}) as avg_{parameter},\n    MIN(m.{parameter}) as min_{parameter},\n    MAX(m.{parameter}) as max_{parameter}\n    FROM floats f\n    JOIN profiles p ON f.float_id = p.float_id\n    JOIN measurements m ON p.profile_id = m.profile_id\n    WHERE m.{parameter} IS NOT NULL\n    GROUP BY latitude_zone, longitude_zone\n    ORDER BY latitude_zone, longitude_zone\n\nQuery Variations:\n- temperature comparison between regions\n- regional temperature differences\n- geographic temperature patterns\n- temperature by latitude zones\n- compare temperature across ocean basins\n\nUsage: This enhanced analytical query provides geographic_comparative capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "high",
        "analytical_type": "geographic_comparative",
        "domain": "geographic_oceanography",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "geographic_regions, spatial_analysis, regional_comparison",
        "parameter_requirements": "parameter:temperature|salinity, coordinates:required"
      }
    },
    {
      "id": "multi_parameter_correlation",
      "content": "Enhanced Analytical Query: multi_parameter_correlation\nIntent: correlation_analysis analysis with high complexity\nContext: parameter_correlation, multi_parameter, relationships analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: correlation_analysis\nComplexity Level: high\n\nSQL Query:\nSELECT\n    CASE\n    WHEN m.pressure < 200 THEN 'Surface'\n    WHEN m.pressure < 1000 THEN 'Intermediate'\n    ELSE 'Deep'\n    END as depth_layer,\n    COUNT(*) as sample_count,\n    AVG(m.temperature) as avg_temperature,\n    AVG(m.salinity) as avg_salinity,\n    CORR(m.temperature, m.salinity) as temp_sal_correlation,\n    AVG(m.temperature * m.salinity) as temp_sal_product,\n    STDDEV(m.temperature) as temp_std,\n    STDDEV(m.salinity) as sal_std\n    FROM measurements m\n    JOIN profiles p ON m.profile_id = p.profile_id\n    WHERE m.temperature IS NOT NULL\n    AND m.salinity IS NOT NULL\n    AND m.pressure IS NOT NULL\n    GROUP BY depth_layer\n    ORDER BY AVG(m.pressure)\n\nQuery Variations:\n- correlation between temperature and salinity\n- relationship between temperature and salinity\n- how do temperature and salinity relate\n- temperature-salinity relationship\n- T-S correlation analysis\n\nUsage: This enhanced analytical query provides correlation_analysis capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "high",
        "analytical_type": "correlation_analysis",
        "domain": "physical_oceanography",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "parameter_correlation, multi_parameter, relationships",
        "parameter_requirements": "temperature:required, salinity:required, pressure:required"
      }
    },
    {
      "id": "float_performance_analysis",
      "content": "Enhanced Analytical Query: float_performance_analysis\nIntent: data_quality_analysis analysis with medium complexity\nContext: float_performance, data_quality, operational_metrics analysis for oceanographic data\nTable Relationships: Multi-table joins with measurements, profiles, and floats\nAnalytical Type: data_quality_analysis\nComplexity Level: medium\n\nSQL Query:\nSELECT\n    f.float_id,\n    f.deployment_date,\n    COUNT(DISTINCT p.profile_id) as total_profiles,\n    COUNT(m.measurement_id) as total_measurements,\n    MIN(p.profile_date) as first_profile,\n    MAX(p.profile_date) as last_profile,\n    DATEDIFF(day, MIN(p.profile_date), MAX(p.profile_date)) as operational_days,\n    AVG(measurements_per_profile.count) as avg_measurements_per_profile,\n    COUNT(CASE WHEN m.temperature_qc <= 2 THEN 1 END) * 100.0 / COUNT(m.temperature_qc) as temp_quality_percentage\n    FROM floats f\n    JOIN profiles p ON f.float_id = p.float_id\n    JOIN measurements m ON p.profile_id = m.profile_id\n    JOIN (\n    SELECT profile_id, COUNT(*) as count\n    FROM measurements\n    GROUP BY profile_id\n    ) measurements_per_profile ON p.profile_id = measurements_per_profile.profile_id\n    WHERE m.temperature_qc IS NOT NULL\n    GROUP BY f.float_id, f.deployment_date\n    ORDER BY total_profiles DESC\n\nQuery Variations:\n- float performance statistics\n- how many profiles per float\n- float operational metrics\n- data quality by float\n- float productivity analysis\n\nUsage: This enhanced analytical query provides data_quality_analysis capabilities for complex oceanographic data analysis, supporting multi-dimensional analysis across depth, time, and geographic dimensions.\n\nExpected Results: Statistical aggregations, grouped analysis, and domain-specific oceanographic insights with proper handling of data quality and measurement relationships.",
      "metadata": {
        "type": "enhanced_analytical",
        "complexity": "medium",
        "analytical_type": "data_quality_analysis",
        "domain": "data_management",
        "query_class": "analytical_complex",
        "enhancement_version": "v2.0",
        "tables": "measurements, profiles, floats",
        "supports_grouping": true,
        "supports_aggregation": true,
        "supports_joins": true,
        "parameter_substitution": true,
        "domain_concepts": "float_performance, data_quality, operational_metrics",
        "parameter_requirements": "quality_control:required"
      }
    }
  ]
}